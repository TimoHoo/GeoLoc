(()=>{"use strict";const t=function(){function t(){this.disposed=!1}return t.prototype.dispose=function(){this.disposed||(this.disposed=!0,this.disposeInternal())},t.prototype.disposeInternal=function(){},t}();function e(t,e){return t>e?1:t<e?-1:0}function n(t,e,n){var o=t.length;if(t[0]<=e)return 0;if(e<=t[o-1])return o-1;var i=void 0;if(n>0){for(i=1;i<o;++i)if(t[i]<e)return i-1}else if(n<0){for(i=1;i<o;++i)if(t[i]<=e)return i}else for(i=1;i<o;++i){if(t[i]==e)return i;if(t[i]<e)return t[i-1]-e<e-t[i]?i-1:i}return o-1}function o(t,e){var n=t.length;if(n!==e.length)return!1;for(var o=0;o<n;o++)if(t[o]!==e[o])return!1;return!0}function i(){return!0}function r(){return!1}function a(){}function s(){return function(){throw new Error("Unimplemented abstract method.")}()}var l=0;function u(t){return t.ol_uid||(t.ol_uid=String(++l))}var c,h=(c=function(t,e){return(c=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}c(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const p=function(t){function e(e){var n=this,o="Assertion failed. See https://openlayers.org/en/v"+"6.5.0".split("-")[0]+"/doc/errors/#"+e+" for details.";return(n=t.call(this,o)||this).code=e,n.name="AssertionError",n.message=o,n}return h(e,t),e}(Error);function f(t,e){if(!t)throw new p(e)}function d(t,e){var n=e[0],o=e[1];return e[0]=t[0]*n+t[2]*o+t[4],e[1]=t[1]*n+t[3]*o+t[5],e}function _(t,e,n,o,i,r,a,s){var l=Math.sin(r),u=Math.cos(r);return t[0]=o*u,t[1]=i*l,t[2]=-o*l,t[3]=i*u,t[4]=a*o*u-s*o*l+e,t[5]=a*i*l+s*i*u+n,t}function g(t,e){var n,o=(n=e)[0]*n[3]-n[1]*n[2];f(0!==o,32);var i=e[0],r=e[1],a=e[2],s=e[3],l=e[4],u=e[5];return t[0]=s/o,t[1]=-r/o,t[2]=-a/o,t[3]=i/o,t[4]=(a*u-s*l)/o,t[5]=-(i*u-r*l)/o,t}function v(t){return"matrix("+t.join(", ")+")"}new Array(6);const y="top-left";function m(t){for(var e=[1/0,1/0,-1/0,-1/0],n=0,o=t.length;n<o;++n)O(e,t[n]);return e}function x(t,e,n){var o,i;return(o=e<t[0]?t[0]-e:t[2]<e?e-t[2]:0)*o+(i=n<t[1]?t[1]-n:t[3]<n?n-t[3]:0)*i}function C(t,e){return E(t,e[0],e[1])}function E(t,e,n){return t[0]<=e&&e<=t[2]&&t[1]<=n&&n<=t[3]}function w(t,e){var n=t[0],o=t[1],i=t[2],r=t[3],a=e[0],s=e[1],l=0;return a<n?l|=16:a>i&&(l|=4),s<o?l|=8:s>r&&(l|=2),0===l&&(l=1),l}function b(t,e,n,o,i){return i?(i[0]=t,i[1]=e,i[2]=n,i[3]=o,i):[t,e,n,o]}function P(t){return b(1/0,1/0,-1/0,-1/0,t)}function T(t,e){return t[0]==e[0]&&t[2]==e[2]&&t[1]==e[1]&&t[3]==e[3]}function O(t,e){e[0]<t[0]&&(t[0]=e[0]),e[0]>t[2]&&(t[2]=e[0]),e[1]<t[1]&&(t[1]=e[1]),e[1]>t[3]&&(t[3]=e[1])}function R(t,e,n,o,i){for(;n<o;n+=i)S(t,e[n],e[n+1]);return t}function S(t,e,n){t[0]=Math.min(t[0],e),t[1]=Math.min(t[1],n),t[2]=Math.max(t[2],e),t[3]=Math.max(t[3],n)}function M(t,e){var n;return(n=e(j(t)))||(n=e(A(t)))||(n=e(Z(t)))?n:(n=e(K(t)))||!1}function I(t){var e=0;return X(t)||(e=G(t)*D(t)),e}function j(t){return[t[0],t[1]]}function A(t){return[t[2],t[1]]}function F(t){return[(t[0]+t[2])/2,(t[1]+t[3])/2]}function L(t,e){var n;return"bottom-left"===e?n=j(t):"bottom-right"===e?n=A(t):e===y?n=K(t):"top-right"===e?n=Z(t):f(!1,13),n}function z(t,e,n,o,i){var r=e*o[0]/2,a=e*o[1]/2,s=Math.cos(n),l=Math.sin(n),u=r*s,c=r*l,h=a*s,p=a*l,f=t[0],d=t[1],_=f-u+p,g=f-u-p,v=f+u-p,y=f+u+p,m=d-c-h,x=d-c+h,C=d+c+h,E=d+c-h;return b(Math.min(_,g,v,y),Math.min(m,x,C,E),Math.max(_,g,v,y),Math.max(m,x,C,E),i)}function D(t){return t[3]-t[1]}function k(t,e,n){var o=n||[1/0,1/0,-1/0,-1/0];return N(t,e)?(t[0]>e[0]?o[0]=t[0]:o[0]=e[0],t[1]>e[1]?o[1]=t[1]:o[1]=e[1],t[2]<e[2]?o[2]=t[2]:o[2]=e[2],t[3]<e[3]?o[3]=t[3]:o[3]=e[3]):P(o),o}function K(t){return[t[0],t[3]]}function Z(t){return[t[2],t[3]]}function G(t){return t[2]-t[0]}function N(t,e){return t[0]<=e[2]&&t[2]>=e[0]&&t[1]<=e[3]&&t[3]>=e[1]}function X(t){return t[2]<t[0]||t[3]<t[1]}function U(t,e,n){return Math.min(Math.max(t,e),n)}var V="cosh"in Math?Math.cosh:function(t){var e=Math.exp(t);return(e+1/e)/2},W="log2"in Math?Math.log2:function(t){return Math.log(t)*Math.LOG2E};function Y(t,e,n,o,i,r){var a=i-n,s=r-o;if(0!==a||0!==s){var l=((t-n)*a+(e-o)*s)/(a*a+s*s);l>1?(n=i,o=r):l>0&&(n+=a*l,o+=s*l)}return q(t,e,n,o)}function q(t,e,n,o){var i=n-t,r=o-e;return i*i+r*r}function H(t){return t*Math.PI/180}function B(t,e){var n=t%e;return n*e<0?n+e:n}function Q(t,e,n){return t+n*(e-t)}function $(t,e,n){return e+":"+t+":"+(n?function(t){return"string"==typeof t?t:function(t){var e=t[0];e!=(0|e)&&(e=e+.5|0);var n=t[1];n!=(0|n)&&(n=n+.5|0);var o=t[2];return o!=(0|o)&&(o=o+.5|0),"rgba("+e+","+n+","+o+","+(void 0===t[3]?1:t[3])+")"}(t)}(n):"null")}var J=new(function(){function t(){this.cache_={},this.cacheSize_=0,this.maxCacheSize_=32}return t.prototype.clear=function(){this.cache_={},this.cacheSize_=0},t.prototype.canExpireCache=function(){return this.cacheSize_>this.maxCacheSize_},t.prototype.expire=function(){if(this.canExpireCache()){var t=0;for(var e in this.cache_){var n=this.cache_[e];0!=(3&t++)||n.hasListener()||(delete this.cache_[e],--this.cacheSize_)}}},t.prototype.get=function(t,e,n){var o=$(t,e,n);return o in this.cache_?this.cache_[o]:null},t.prototype.set=function(t,e,n,o){var i=$(t,e,n);this.cache_[i]=o,++this.cacheSize_},t.prototype.setSize=function(t){this.maxCacheSize_=t,this.expire()},t}());const tt=function(){function t(t){this.propagationStopped,this.type=t,this.target=null}return t.prototype.preventDefault=function(){this.propagationStopped=!0},t.prototype.stopPropagation=function(){this.propagationStopped=!0},t}(),et="propertychange";var nt="function"==typeof Object.assign?Object.assign:function(t,e){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var n=Object(t),o=1,i=arguments.length;o<i;++o){var r=arguments[o];if(null!=r)for(var a in r)r.hasOwnProperty(a)&&(n[a]=r[a])}return n};function ot(t){for(var e in t)delete t[e]}var it="function"==typeof Object.values?Object.values:function(t){var e=[];for(var n in t)e.push(t[n]);return e},rt=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const at=function(t){function e(e){var n=t.call(this)||this;return n.eventTarget_=e,n.pendingRemovals_=null,n.dispatching_=null,n.listeners_=null,n}return rt(e,t),e.prototype.addEventListener=function(t,e){if(t&&e){var n=this.listeners_||(this.listeners_={}),o=n[t]||(n[t]=[]);-1===o.indexOf(e)&&o.push(e)}},e.prototype.dispatchEvent=function(t){var e="string"==typeof t?new tt(t):t,n=e.type;e.target||(e.target=this.eventTarget_||this);var o,i=this.listeners_&&this.listeners_[n];if(i){var r=this.dispatching_||(this.dispatching_={}),s=this.pendingRemovals_||(this.pendingRemovals_={});n in r||(r[n]=0,s[n]=0),++r[n];for(var l=0,u=i.length;l<u;++l)if(!1===(o="handleEvent"in i[l]?i[l].handleEvent(e):i[l].call(this,e))||e.propagationStopped){o=!1;break}if(--r[n],0===r[n]){var c=s[n];for(delete s[n];c--;)this.removeEventListener(n,a);delete r[n]}return o}},e.prototype.disposeInternal=function(){this.listeners_&&ot(this.listeners_)},e.prototype.getListeners=function(t){return this.listeners_&&this.listeners_[t]||void 0},e.prototype.hasListener=function(t){return!!this.listeners_&&(t?t in this.listeners_:Object.keys(this.listeners_).length>0)},e.prototype.removeEventListener=function(t,e){var n=this.listeners_&&this.listeners_[t];if(n){var o=n.indexOf(e);-1!==o&&(this.pendingRemovals_&&t in this.pendingRemovals_?(n[o]=a,++this.pendingRemovals_[t]):(n.splice(o,1),0===n.length&&delete this.listeners_[t]))}},e}(t),st="change",lt="contextmenu",ut="click",ct="keydown",ht="keypress",pt="resize",ft="touchmove",dt="wheel";function _t(t,e,n,o,i){if(o&&o!==t&&(n=n.bind(o)),i){var r=n;n=function(){t.removeEventListener(e,n),r.apply(this,arguments)}}var a={target:t,type:e,listener:n};return t.addEventListener(e,n),a}function gt(t,e,n,o){return _t(t,e,n,o,!0)}function vt(t){t&&t.target&&(t.target.removeEventListener(t.type,t.listener),ot(t))}var yt=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const mt=function(t){function e(){var e=t.call(this)||this;return e.revision_=0,e}return yt(e,t),e.prototype.changed=function(){++this.revision_,this.dispatchEvent(st)},e.prototype.getRevision=function(){return this.revision_},e.prototype.on=function(t,e){if(Array.isArray(t)){for(var n=t.length,o=new Array(n),i=0;i<n;++i)o[i]=_t(this,t[i],e);return o}return _t(this,t,e)},e.prototype.once=function(t,e){var n;if(Array.isArray(t)){var o=t.length;n=new Array(o);for(var i=0;i<o;++i)n[i]=gt(this,t[i],e)}else n=gt(this,t,e);return e.ol_key=n,n},e.prototype.un=function(t,e){var n=e.ol_key;if(n)!function(t){if(Array.isArray(t))for(var e=0,n=t.length;e<n;++e)vt(t[e]);else vt(t)}(n);else if(Array.isArray(t))for(var o=0,i=t.length;o<i;++o)this.removeEventListener(t[o],e);else this.removeEventListener(t,e)},e}(at);var xt=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Ct=function(t){function e(e,n,o){var i=t.call(this,e)||this;return i.key=n,i.oldValue=o,i}return xt(e,t),e}(tt),Et=function(t){function e(e){var n=t.call(this)||this;return u(n),n.values_=null,void 0!==e&&n.setProperties(e),n}return xt(e,t),e.prototype.get=function(t){var e;return this.values_&&this.values_.hasOwnProperty(t)&&(e=this.values_[t]),e},e.prototype.getKeys=function(){return this.values_&&Object.keys(this.values_)||[]},e.prototype.getProperties=function(){return this.values_&&nt({},this.values_)||{}},e.prototype.hasProperties=function(){return!!this.values_},e.prototype.notify=function(t,e){var n;n=bt(t),this.dispatchEvent(new Ct(n,t,e)),n=et,this.dispatchEvent(new Ct(n,t,e))},e.prototype.set=function(t,e,n){var o=this.values_||(this.values_={});if(n)o[t]=e;else{var i=o[t];o[t]=e,i!==e&&this.notify(t,i)}},e.prototype.setProperties=function(t,e){for(var n in t)this.set(n,t[n],e)},e.prototype.applyProperties=function(t){t.values_&&nt(this.values_||(this.values_={}),t.values_)},e.prototype.unset=function(t,e){if(this.values_&&t in this.values_){var n=this.values_[t];delete this.values_[t],function(t){var e;for(e in t)return!1;return!e}(this.values_)&&(this.values_=null),e||this.notify(t,n)}},e}(mt),wt={};function bt(t){return wt.hasOwnProperty(t)?wt[t]:wt[t]="change:"+t}const Pt=Et,Tt="opacity",Ot="visible",Rt="extent",St="zIndex",Mt="maxResolution",It="minResolution",jt="maxZoom",At="minZoom",Ft="source";var Lt=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const zt=function(t){function e(e){var n=t.call(this)||this,o=nt({},e);return o.opacity=void 0!==e.opacity?e.opacity:1,f("number"==typeof o.opacity,64),o.visible=void 0===e.visible||e.visible,o.zIndex=e.zIndex,o.maxResolution=void 0!==e.maxResolution?e.maxResolution:1/0,o.minResolution=void 0!==e.minResolution?e.minResolution:0,o.minZoom=void 0!==e.minZoom?e.minZoom:-1/0,o.maxZoom=void 0!==e.maxZoom?e.maxZoom:1/0,n.className_=void 0!==o.className?e.className:"ol-layer",delete o.className,n.setProperties(o),n.state_=null,n}return Lt(e,t),e.prototype.getClassName=function(){return this.className_},e.prototype.getLayerState=function(t){var e=this.state_||{layer:this,managed:void 0===t||t},n=this.getZIndex();return e.opacity=U(Math.round(100*this.getOpacity())/100,0,1),e.sourceState=this.getSourceState(),e.visible=this.getVisible(),e.extent=this.getExtent(),e.zIndex=void 0!==n?n:!1===e.managed?1/0:0,e.maxResolution=this.getMaxResolution(),e.minResolution=Math.max(this.getMinResolution(),0),e.minZoom=this.getMinZoom(),e.maxZoom=this.getMaxZoom(),this.state_=e,e},e.prototype.getLayersArray=function(t){return s()},e.prototype.getLayerStatesArray=function(t){return s()},e.prototype.getExtent=function(){return this.get(Rt)},e.prototype.getMaxResolution=function(){return this.get(Mt)},e.prototype.getMinResolution=function(){return this.get(It)},e.prototype.getMinZoom=function(){return this.get(At)},e.prototype.getMaxZoom=function(){return this.get(jt)},e.prototype.getOpacity=function(){return this.get(Tt)},e.prototype.getSourceState=function(){return s()},e.prototype.getVisible=function(){return this.get(Ot)},e.prototype.getZIndex=function(){return this.get(St)},e.prototype.setExtent=function(t){this.set(Rt,t)},e.prototype.setMaxResolution=function(t){this.set(Mt,t)},e.prototype.setMinResolution=function(t){this.set(It,t)},e.prototype.setMaxZoom=function(t){this.set(jt,t)},e.prototype.setMinZoom=function(t){this.set(At,t)},e.prototype.setOpacity=function(t){f("number"==typeof t,64),this.set(Tt,t)},e.prototype.setVisible=function(t){this.set(Ot,t)},e.prototype.setZIndex=function(t){this.set(St,t)},e.prototype.disposeInternal=function(){this.state_&&(this.state_.layer=null,this.state_=null),t.prototype.disposeInternal.call(this)},e}(Pt),Dt="precompose",kt="rendercomplete",Kt="undefined",Zt="ready";var Gt=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();function Nt(t,e){if(!t.visible)return!1;var n=e.resolution;if(n<t.minResolution||n>=t.maxResolution)return!1;var o=e.zoom;return o>t.minZoom&&o<=t.maxZoom}const Xt=function(t){function e(e){var n=this,o=nt({},e);delete o.source,(n=t.call(this,o)||this).mapPrecomposeKey_=null,n.mapRenderKey_=null,n.sourceChangeKey_=null,n.renderer_=null,e.render&&(n.render=e.render),e.map&&n.setMap(e.map),n.addEventListener(bt(Ft),n.handleSourcePropertyChange_);var i=e.source?e.source:null;return n.setSource(i),n}return Gt(e,t),e.prototype.getLayersArray=function(t){var e=t||[];return e.push(this),e},e.prototype.getLayerStatesArray=function(t){var e=t||[];return e.push(this.getLayerState()),e},e.prototype.getSource=function(){return this.get(Ft)||null},e.prototype.getSourceState=function(){var t=this.getSource();return t?t.getState():Kt},e.prototype.handleSourceChange_=function(){this.changed()},e.prototype.handleSourcePropertyChange_=function(){this.sourceChangeKey_&&(vt(this.sourceChangeKey_),this.sourceChangeKey_=null);var t=this.getSource();t&&(this.sourceChangeKey_=_t(t,st,this.handleSourceChange_,this)),this.changed()},e.prototype.getFeatures=function(t){return this.renderer_.getFeatures(t)},e.prototype.render=function(t,e){var n=this.getRenderer();if(n.prepareFrame(t))return n.renderFrame(t,e)},e.prototype.setMap=function(t){this.mapPrecomposeKey_&&(vt(this.mapPrecomposeKey_),this.mapPrecomposeKey_=null),t||this.changed(),this.mapRenderKey_&&(vt(this.mapRenderKey_),this.mapRenderKey_=null),t&&(this.mapPrecomposeKey_=_t(t,Dt,(function(t){var e=t.frameState.layerStatesArray,n=this.getLayerState(!1);f(!e.some((function(t){return t.layer===n.layer})),67),e.push(n)}),this),this.mapRenderKey_=_t(this,st,t.render,t),this.changed())},e.prototype.setSource=function(t){this.set(Ft,t)},e.prototype.getRenderer=function(){return this.renderer_||(this.renderer_=this.createRenderer()),this.renderer_},e.prototype.hasRenderer=function(){return!!this.renderer_},e.prototype.createRenderer=function(){return null},e.prototype.disposeInternal=function(){this.setSource(null),t.prototype.disposeInternal.call(this)},e}(zt);function Ut(t,e){for(var n=!0,o=t.length-1;o>=0;--o)if(t[o]!=e[o]){n=!1;break}return n}function Vt(t,e){var n=Math.cos(e),o=Math.sin(e),i=t[0]*n-t[1]*o,r=t[1]*n+t[0]*o;return t[0]=i,t[1]=r,t}var Wt=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();function Yt(t,e){J.expire()}const qt=function(t){function e(e){var n=t.call(this)||this;return n.map_=e,n}return Wt(e,t),e.prototype.dispatchRenderEvent=function(t,e){s()},e.prototype.calculateMatrices2D=function(t){var e=t.viewState,n=t.coordinateToPixelTransform,o=t.pixelToCoordinateTransform;_(n,t.size[0]/2,t.size[1]/2,1/e.resolution,-1/e.resolution,-e.rotation,-e.center[0],-e.center[1]),g(o,n)},e.prototype.forEachFeatureAtCoordinate=function(t,e,n,o,i,r,a,s){var l,u=e.viewState;function c(t,e,n,o){return i.call(r,e,t?n:null,o)}var h=u.projection,p=function(t,e){if(e.canWrapX()){var n=G(e.getExtent()),o=function(t,e,n){var o=e.getExtent(),i=0;if(e.canWrapX()&&(t[0]<o[0]||t[0]>o[2])){var r=n||G(o);i=Math.floor((t[0]-o[0])/r)}return i}(t,e,n);o&&(t[0]-=o*n)}return t}(t.slice(),h),f=[[0,0]];if(h.canWrapX()&&o){var d=G(h.getExtent());f.push([-d,0],[d,0])}for(var _=e.layerStatesArray,g=_.length,v=[],y=[],m=0;m<f.length;m++)for(var x=g-1;x>=0;--x){var C=_[x],E=C.layer;if(E.hasRenderer()&&Nt(C,u)&&a.call(s,E)){var w=E.getRenderer(),b=E.getSource();if(w&&b){var P=b.getWrapX()?p:t,T=c.bind(null,C.managed);y[0]=P[0]+f[m][0],y[1]=P[1]+f[m][1],l=w.forEachFeatureAtCoordinate(y,e,n,T,v)}if(l)return l}}if(0!==v.length){var O=1/v.length;return v.forEach((function(t,e){return t.distanceSq+=e*O})),v.sort((function(t,e){return t.distanceSq-e.distanceSq})),v.some((function(t){return l=t.callback(t.feature,t.layer,t.geometry)})),l}},e.prototype.forEachLayerAtPixel=function(t,e,n,o,i){return s()},e.prototype.hasFeatureAtCoordinate=function(t,e,n,o,r,a){return void 0!==this.forEachFeatureAtCoordinate(t,e,n,o,i,this,r,a)},e.prototype.getMap=function(){return this.map_},e.prototype.renderFrame=function(t){s()},e.prototype.scheduleExpireIconCache=function(t){J.canExpireCache()&&t.postRenderFunctions.push(Yt)},e}(t);var Ht=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Bt=function(t){function e(e,n,o,i){var r=t.call(this,e)||this;return r.inversePixelTransform=n,r.frameState=o,r.context=i,r}return Ht(e,t),e}(tt);var Qt="ol-hidden",$t="ol-control",Jt=(new RegExp(["^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)","(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)","(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)","(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?","(?:small|large)|medium|smaller|larger|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))","(?:\\s*\\/\\s*(normal|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])?))","?\\s*([-,\\\"\\'\\sa-z]+?)\\s*$"].join(""),"i"),"undefined"!=typeof navigator&&void 0!==navigator.userAgent?navigator.userAgent.toLowerCase():""),te=-1!==Jt.indexOf("firefox"),ee=(-1!==Jt.indexOf("safari")&&Jt.indexOf("chrom"),-1!==Jt.indexOf("webkit")&&-1==Jt.indexOf("edge")),ne=-1!==Jt.indexOf("macintosh"),oe="undefined"!=typeof devicePixelRatio?devicePixelRatio:1,ie="undefined"!=typeof WorkerGlobalScope&&"undefined"!=typeof OffscreenCanvas&&self instanceof WorkerGlobalScope,re="undefined"!=typeof Image&&Image.prototype.decode,ae=function(){var t=!1;try{var e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("_",null,e),window.removeEventListener("_",null,e)}catch(t){}return t}();function se(t,e,n){var o=n&&n.length?n.shift():ie?new OffscreenCanvas(t||300,e||300):document.createElement("canvas");return t&&(o.width=t),e&&(o.height=e),o.getContext("2d")}function le(t,e){var n=e.parentNode;n&&n.replaceChild(t,e)}function ue(t){return t&&t.parentNode?t.parentNode.removeChild(t):null}var ce=new Pt;(new at).setSize=function(){console.warn("labelCache is deprecated.")};function he(t,e,n,o){0!==e&&(t.translate(n,o),t.rotate(e),t.translate(-n,-o))}var pe=null,fe=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const de=function(t){function e(e){var n=t.call(this,e)||this;n.fontChangeListenerKey_=_t(ce,et,e.redrawText.bind(e)),n.element_=document.createElement("div");var o=n.element_.style;o.position="absolute",o.width="100%",o.height="100%",o.zIndex="0",n.element_.className="ol-unselectable ol-layers";var i=e.getViewport();return i.insertBefore(n.element_,i.firstChild||null),n.children_=[],n.renderedVisible_=!0,n}return fe(e,t),e.prototype.dispatchRenderEvent=function(t,e){var n=this.getMap();if(n.hasListener(t)){var o=new Bt(t,void 0,e);n.dispatchEvent(o)}},e.prototype.disposeInternal=function(){vt(this.fontChangeListenerKey_),this.element_.parentNode.removeChild(this.element_),t.prototype.disposeInternal.call(this)},e.prototype.renderFrame=function(t){if(t){this.calculateMatrices2D(t),this.dispatchRenderEvent(Dt,t);var e=t.layerStatesArray.sort((function(t,e){return t.zIndex-e.zIndex})),n=t.viewState;this.children_.length=0;for(var o=[],i=null,r=0,a=e.length;r<a;++r){var s=e[r];if(t.layerIndex=r,Nt(s,n)&&(s.sourceState==Zt||s.sourceState==Kt)){var l=s.layer,u=l.render(t,i);u&&(u!==i&&(this.children_.push(u),i=u),"getDeclutter"in l&&o.push(l))}}for(r=o.length-1;r>=0;--r)o[r].renderDeclutter(t);!function(t,e){for(var n=t.childNodes,o=0;;++o){var i=n[o],r=e[o];if(!i&&!r)break;i!==r&&(i?r?t.insertBefore(r,i):(t.removeChild(i),--o):t.appendChild(r))}}(this.element_,this.children_),this.dispatchRenderEvent("postcompose",t),this.renderedVisible_||(this.element_.style.display="",this.renderedVisible_=!0),this.scheduleExpireIconCache(t)}else this.renderedVisible_&&(this.element_.style.display="none",this.renderedVisible_=!1)},e.prototype.forEachLayerAtPixel=function(t,e,n,o,i){for(var r=e.viewState,a=e.layerStatesArray,s=a.length-1;s>=0;--s){var l=a[s],u=l.layer;if(u.hasRenderer()&&Nt(l,r)&&i(u)){var c=u.getRenderer().getDataAtPixel(t,e,n);if(c){var h=o(u,c);if(h)return h}}}},e}(qt),_e="add",ge="remove";var ve=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),ye="length",me=function(t){function e(e,n,o){var i=t.call(this,e)||this;return i.element=n,i.index=o,i}return ve(e,t),e}(tt);const xe=function(t){function e(e,n){var o=t.call(this)||this,i=n||{};if(o.unique_=!!i.unique,o.array_=e||[],o.unique_)for(var r=0,a=o.array_.length;r<a;++r)o.assertUnique_(o.array_[r],r);return o.updateLength_(),o}return ve(e,t),e.prototype.clear=function(){for(;this.getLength()>0;)this.pop()},e.prototype.extend=function(t){for(var e=0,n=t.length;e<n;++e)this.push(t[e]);return this},e.prototype.forEach=function(t){for(var e=this.array_,n=0,o=e.length;n<o;++n)t(e[n],n,e)},e.prototype.getArray=function(){return this.array_},e.prototype.item=function(t){return this.array_[t]},e.prototype.getLength=function(){return this.get(ye)},e.prototype.insertAt=function(t,e){this.unique_&&this.assertUnique_(e),this.array_.splice(t,0,e),this.updateLength_(),this.dispatchEvent(new me(_e,e,t))},e.prototype.pop=function(){return this.removeAt(this.getLength()-1)},e.prototype.push=function(t){this.unique_&&this.assertUnique_(t);var e=this.getLength();return this.insertAt(e,t),this.getLength()},e.prototype.remove=function(t){for(var e=this.array_,n=0,o=e.length;n<o;++n)if(e[n]===t)return this.removeAt(n)},e.prototype.removeAt=function(t){var e=this.array_[t];return this.array_.splice(t,1),this.updateLength_(),this.dispatchEvent(new me(ge,e,t)),e},e.prototype.setAt=function(t,e){var n=this.getLength();if(t<n){this.unique_&&this.assertUnique_(e,t);var o=this.array_[t];this.array_[t]=e,this.dispatchEvent(new me(ge,o,t)),this.dispatchEvent(new me(_e,e,t))}else{for(var i=n;i<t;++i)this.insertAt(i,void 0);this.insertAt(t,e)}},e.prototype.updateLength_=function(){this.set(ye,this.array_.length)},e.prototype.assertUnique_=function(t,e){for(var n=0,o=this.array_.length;n<o;++n)if(this.array_[n]===t&&n!==e)throw new p(58)},e}(Pt);var Ce=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Ee="layers";const we=function(t){function e(e){var n=this,o=e||{},i=nt({},o);delete i.layers;var r=o.layers;return(n=t.call(this,i)||this).layersListenerKeys_=[],n.listenerKeys_={},n.addEventListener(bt(Ee),n.handleLayersChanged_),r?Array.isArray(r)?r=new xe(r.slice(),{unique:!0}):f("function"==typeof r.getArray,43):r=new xe(void 0,{unique:!0}),n.setLayers(r),n}return Ce(e,t),e.prototype.handleLayerChange_=function(){this.changed()},e.prototype.handleLayersChanged_=function(){this.layersListenerKeys_.forEach(vt),this.layersListenerKeys_.length=0;var t=this.getLayers();for(var e in this.layersListenerKeys_.push(_t(t,_e,this.handleLayersAdd_,this),_t(t,ge,this.handleLayersRemove_,this)),this.listenerKeys_)this.listenerKeys_[e].forEach(vt);ot(this.listenerKeys_);for(var n=t.getArray(),o=0,i=n.length;o<i;o++){var r=n[o];this.listenerKeys_[u(r)]=[_t(r,et,this.handleLayerChange_,this),_t(r,st,this.handleLayerChange_,this)]}this.changed()},e.prototype.handleLayersAdd_=function(t){var e=t.element;this.listenerKeys_[u(e)]=[_t(e,et,this.handleLayerChange_,this),_t(e,st,this.handleLayerChange_,this)],this.changed()},e.prototype.handleLayersRemove_=function(t){var e=u(t.element);this.listenerKeys_[e].forEach(vt),delete this.listenerKeys_[e],this.changed()},e.prototype.getLayers=function(){return this.get(Ee)},e.prototype.setLayers=function(t){this.set(Ee,t)},e.prototype.getLayersArray=function(t){var e=void 0!==t?t:[];return this.getLayers().forEach((function(t){t.getLayersArray(e)})),e},e.prototype.getLayerStatesArray=function(t){var e=void 0!==t?t:[],n=e.length;this.getLayers().forEach((function(t){t.getLayerStatesArray(e)}));for(var o=this.getLayerState(),i=n,r=e.length;i<r;i++){var a=e[i];a.opacity*=o.opacity,a.visible=a.visible&&o.visible,a.maxResolution=Math.min(a.maxResolution,o.maxResolution),a.minResolution=Math.max(a.minResolution,o.minResolution),a.minZoom=Math.max(a.minZoom,o.minZoom),a.maxZoom=Math.min(a.maxZoom,o.maxZoom),void 0!==o.extent&&(void 0!==a.extent?a.extent=k(a.extent,o.extent):a.extent=o.extent)}return e},e.prototype.getSourceState=function(){return Zt},e}(zt);var be=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Pe=function(t){function e(e,n,o){var i=t.call(this,e)||this;return i.map=n,i.frameState=void 0!==o?o:null,i}return be(e,t),e}(tt);var Te=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Oe=function(t){function e(e,n,o,i,r){var a=t.call(this,e,n,r)||this;return a.originalEvent=o,a.pixel_=null,a.coordinate_=null,a.dragging=void 0!==i&&i,a}return Te(e,t),Object.defineProperty(e.prototype,"pixel",{get:function(){return this.pixel_||(this.pixel_=this.map.getEventPixel(this.originalEvent)),this.pixel_},set:function(t){this.pixel_=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"coordinate",{get:function(){return this.coordinate_||(this.coordinate_=this.map.getCoordinateFromPixel(this.pixel)),this.coordinate_},set:function(t){this.coordinate_=t},enumerable:!1,configurable:!0}),e.prototype.preventDefault=function(){t.prototype.preventDefault.call(this),this.originalEvent.preventDefault()},e.prototype.stopPropagation=function(){t.prototype.stopPropagation.call(this),this.originalEvent.stopPropagation()},e}(Pe),Re={SINGLECLICK:"singleclick",CLICK:ut,DBLCLICK:"dblclick",POINTERDRAG:"pointerdrag",POINTERMOVE:"pointermove",POINTERDOWN:"pointerdown",POINTERUP:"pointerup",POINTEROVER:"pointerover",POINTEROUT:"pointerout",POINTERENTER:"pointerenter",POINTERLEAVE:"pointerleave",POINTERCANCEL:"pointercancel"},Se="pointerdown";var Me=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Ie=function(t){function e(e,n){var o=t.call(this,e)||this;o.map_=e,o.clickTimeoutId_,o.emulateClicks_=!1,o.dragging_=!1,o.dragListenerKeys_=[],o.moveTolerance_=n?n*oe:oe,o.down_=null;var i=o.map_.getViewport();return o.activePointers_=0,o.trackedTouches_={},o.element_=i,o.pointerdownListenerKey_=_t(i,Se,o.handlePointerDown_,o),o.originalPointerMoveEvent_,o.relayedListenerKey_=_t(i,"pointermove",o.relayEvent_,o),o.boundHandleTouchMove_=o.handleTouchMove_.bind(o),o.element_.addEventListener(ft,o.boundHandleTouchMove_,!!ae&&{passive:!1}),o}return Me(e,t),e.prototype.emulateClick_=function(t){var e=new Oe(Re.CLICK,this.map_,t);this.dispatchEvent(e),void 0!==this.clickTimeoutId_?(clearTimeout(this.clickTimeoutId_),this.clickTimeoutId_=void 0,e=new Oe(Re.DBLCLICK,this.map_,t),this.dispatchEvent(e)):this.clickTimeoutId_=setTimeout(function(){this.clickTimeoutId_=void 0;var e=new Oe(Re.SINGLECLICK,this.map_,t);this.dispatchEvent(e)}.bind(this),250)},e.prototype.updateActivePointers_=function(t){var e=t;e.type==Re.POINTERUP||e.type==Re.POINTERCANCEL?delete this.trackedTouches_[e.pointerId]:e.type==Re.POINTERDOWN&&(this.trackedTouches_[e.pointerId]=!0),this.activePointers_=Object.keys(this.trackedTouches_).length},e.prototype.handlePointerUp_=function(t){this.updateActivePointers_(t);var e=new Oe(Re.POINTERUP,this.map_,t);this.dispatchEvent(e),this.emulateClicks_&&!e.propagationStopped&&!this.dragging_&&this.isMouseActionButton_(t)&&this.emulateClick_(this.down_),0===this.activePointers_&&(this.dragListenerKeys_.forEach(vt),this.dragListenerKeys_.length=0,this.dragging_=!1,this.down_=null)},e.prototype.isMouseActionButton_=function(t){return 0===t.button},e.prototype.handlePointerDown_=function(t){this.emulateClicks_=0===this.activePointers_,this.updateActivePointers_(t);var e=new Oe(Re.POINTERDOWN,this.map_,t);if(this.dispatchEvent(e),this.down_=t,0===this.dragListenerKeys_.length){var n=this.map_.getOwnerDocument();this.dragListenerKeys_.push(_t(n,Re.POINTERMOVE,this.handlePointerMove_,this),_t(n,Re.POINTERUP,this.handlePointerUp_,this),_t(this.element_,Re.POINTERCANCEL,this.handlePointerUp_,this)),this.element_.getRootNode&&this.element_.getRootNode()!==n&&this.dragListenerKeys_.push(_t(this.element_.getRootNode(),Re.POINTERUP,this.handlePointerUp_,this))}},e.prototype.handlePointerMove_=function(t){if(this.isMoving_(t)){this.dragging_=!0;var e=new Oe(Re.POINTERDRAG,this.map_,t,this.dragging_);this.dispatchEvent(e)}},e.prototype.relayEvent_=function(t){this.originalPointerMoveEvent_=t;var e=!(!this.down_||!this.isMoving_(t));this.dispatchEvent(new Oe(t.type,this.map_,t,e))},e.prototype.handleTouchMove_=function(t){this.originalPointerMoveEvent_&&!this.originalPointerMoveEvent_.defaultPrevented||t.preventDefault()},e.prototype.isMoving_=function(t){return this.dragging_||Math.abs(t.clientX-this.down_.clientX)>this.moveTolerance_||Math.abs(t.clientY-this.down_.clientY)>this.moveTolerance_},e.prototype.disposeInternal=function(){this.relayedListenerKey_&&(vt(this.relayedListenerKey_),this.relayedListenerKey_=null),this.element_.removeEventListener(ft,this.boundHandleTouchMove_),this.pointerdownListenerKey_&&(vt(this.pointerdownListenerKey_),this.pointerdownListenerKey_=null),this.dragListenerKeys_.forEach(vt),this.dragListenerKeys_.length=0,this.element_=null,t.prototype.disposeInternal.call(this)},e}(at),je="postrender",Ae="layergroup",Fe="size",Le="target",ze="view";var De=1/0;const ke=function(){function t(t,e){this.priorityFunction_=t,this.keyFunction_=e,this.elements_=[],this.priorities_=[],this.queuedElements_={}}return t.prototype.clear=function(){this.elements_.length=0,this.priorities_.length=0,ot(this.queuedElements_)},t.prototype.dequeue=function(){var t=this.elements_,e=this.priorities_,n=t[0];1==t.length?(t.length=0,e.length=0):(t[0]=t.pop(),e[0]=e.pop(),this.siftUp_(0));var o=this.keyFunction_(n);return delete this.queuedElements_[o],n},t.prototype.enqueue=function(t){f(!(this.keyFunction_(t)in this.queuedElements_),31);var e=this.priorityFunction_(t);return e!=De&&(this.elements_.push(t),this.priorities_.push(e),this.queuedElements_[this.keyFunction_(t)]=!0,this.siftDown_(0,this.elements_.length-1),!0)},t.prototype.getCount=function(){return this.elements_.length},t.prototype.getLeftChildIndex_=function(t){return 2*t+1},t.prototype.getRightChildIndex_=function(t){return 2*t+2},t.prototype.getParentIndex_=function(t){return t-1>>1},t.prototype.heapify_=function(){var t;for(t=(this.elements_.length>>1)-1;t>=0;t--)this.siftUp_(t)},t.prototype.isEmpty=function(){return 0===this.elements_.length},t.prototype.isKeyQueued=function(t){return t in this.queuedElements_},t.prototype.isQueued=function(t){return this.isKeyQueued(this.keyFunction_(t))},t.prototype.siftUp_=function(t){for(var e=this.elements_,n=this.priorities_,o=e.length,i=e[t],r=n[t],a=t;t<o>>1;){var s=this.getLeftChildIndex_(t),l=this.getRightChildIndex_(t),u=l<o&&n[l]<n[s]?l:s;e[t]=e[u],n[t]=n[u],t=u}e[t]=i,n[t]=r,this.siftDown_(a,t)},t.prototype.siftDown_=function(t,e){for(var n=this.elements_,o=this.priorities_,i=n[e],r=o[e];e>t;){var a=this.getParentIndex_(e);if(!(o[a]>r))break;n[e]=n[a],o[e]=o[a],e=a}n[e]=i,o[e]=r},t.prototype.reprioritize=function(){var t,e,n,o=this.priorityFunction_,i=this.elements_,r=this.priorities_,a=0,s=i.length;for(e=0;e<s;++e)(n=o(t=i[e]))==De?delete this.queuedElements_[this.keyFunction_(t)]:(r[a]=n,i[a++]=t);i.length=a,r.length=a,this.heapify_()},t}();var Ke=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Ze=function(t){function e(e,n){var o=t.call(this,(function(t){return e.apply(null,t)}),(function(t){return t[0].getKey()}))||this;return o.boundHandleTileChange_=o.handleTileChange.bind(o),o.tileChangeCallback_=n,o.tilesLoading_=0,o.tilesLoadingKeys_={},o}return Ke(e,t),e.prototype.enqueue=function(e){var n=t.prototype.enqueue.call(this,e);return n&&e[0].addEventListener(st,this.boundHandleTileChange_),n},e.prototype.getTilesLoading=function(){return this.tilesLoading_},e.prototype.handleTileChange=function(t){var e=t.target,n=e.getState();if(e.hifi&&2===n||3===n||4===n){e.removeEventListener(st,this.boundHandleTileChange_);var o=e.getKey();o in this.tilesLoadingKeys_&&(delete this.tilesLoadingKeys_[o],--this.tilesLoading_),this.tileChangeCallback_()}},e.prototype.loadMoreTiles=function(t,e){for(var n,o,i=0;this.tilesLoading_<t&&i<e&&this.getCount()>0;)o=(n=this.dequeue()[0]).getKey(),0!==n.getState()||o in this.tilesLoadingKeys_||(this.tilesLoadingKeys_[o]=!0,++this.tilesLoading_,++i,n.load())},e}(ke);var Ge={DEGREES:"degrees",FEET:"ft",METERS:"m",PIXELS:"pixels",TILE_PIXELS:"tile-pixels",USFEET:"us-ft"},Ne={};Ne[Ge.DEGREES]=2*Math.PI*6370997/360,Ne[Ge.FEET]=.3048,Ne[Ge.METERS]=1,Ne[Ge.USFEET]=1200/3937;const Xe=Ge,Ue="center",Ve="resolution",We="rotation";const Ye=function(){function t(t){this.code_=t.code,this.units_=t.units,this.extent_=void 0!==t.extent?t.extent:null,this.worldExtent_=void 0!==t.worldExtent?t.worldExtent:null,this.axisOrientation_=void 0!==t.axisOrientation?t.axisOrientation:"enu",this.global_=void 0!==t.global&&t.global,this.canWrapX_=!(!this.global_||!this.extent_),this.getPointResolutionFunc_=t.getPointResolution,this.defaultTileGrid_=null,this.metersPerUnit_=t.metersPerUnit}return t.prototype.canWrapX=function(){return this.canWrapX_},t.prototype.getCode=function(){return this.code_},t.prototype.getExtent=function(){return this.extent_},t.prototype.getUnits=function(){return this.units_},t.prototype.getMetersPerUnit=function(){return this.metersPerUnit_||Ne[this.units_]},t.prototype.getWorldExtent=function(){return this.worldExtent_},t.prototype.getAxisOrientation=function(){return this.axisOrientation_},t.prototype.isGlobal=function(){return this.global_},t.prototype.setGlobal=function(t){this.global_=t,this.canWrapX_=!(!t||!this.extent_)},t.prototype.getDefaultTileGrid=function(){return this.defaultTileGrid_},t.prototype.setDefaultTileGrid=function(t){this.defaultTileGrid_=t},t.prototype.setExtent=function(t){this.extent_=t,this.canWrapX_=!(!this.global_||!t)},t.prototype.setWorldExtent=function(t){this.worldExtent_=t},t.prototype.setGetPointResolution=function(t){this.getPointResolutionFunc_=t},t.prototype.getPointResolutionFunc=function(){return this.getPointResolutionFunc_},t}();var qe=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),He=6378137,Be=Math.PI*He,Qe=[-Be,-Be,Be,Be],$e=[-180,-85,180,85],Je=He*Math.log(Math.tan(Math.PI/2)),tn=function(t){function e(e){return t.call(this,{code:e,units:Xe.METERS,extent:Qe,global:!0,worldExtent:$e,getPointResolution:function(t,e){return t/V(e[1]/He)}})||this}return qe(e,t),e}(Ye),en=[new tn("EPSG:3857"),new tn("EPSG:102100"),new tn("EPSG:102113"),new tn("EPSG:900913"),new tn("http://www.opengis.net/gml/srs/epsg.xml#3857")];var nn=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),on=[-180,-90,180,90],rn=6378137*Math.PI/180,an=function(t){function e(e,n){return t.call(this,{code:e,units:Xe.DEGREES,extent:on,axisOrientation:n,global:!0,metersPerUnit:rn,worldExtent:on})||this}return nn(e,t),e}(Ye),sn=[new an("CRS:84"),new an("EPSG:4326","neu"),new an("urn:ogc:def:crs:OGC:1.3:CRS84"),new an("urn:ogc:def:crs:OGC:2:84"),new an("http://www.opengis.net/gml/srs/epsg.xml#4326","neu")],ln={},un={};function cn(t,e,n){var o=t.getCode(),i=e.getCode();o in un||(un[o]={}),un[o][i]=n}function hn(t,e,n){var o=n||6371008.8,i=H(t[1]),r=H(e[1]),a=(r-i)/2,s=H(e[0]-t[0])/2,l=Math.sin(a)*Math.sin(a)+Math.sin(s)*Math.sin(s)*Math.cos(i)*Math.cos(r);return 2*o*Math.atan2(Math.sqrt(l),Math.sqrt(1-l))}function pn(t,e,n){var o;if(void 0!==e){for(var i=0,r=t.length;i<r;++i)e[i]=t[i];o=e}else o=t.slice();return o}function fn(t,e,n){if(void 0!==e&&t!==e){for(var o=0,i=t.length;o<i;++o)e[o]=t[o];t=e}return t}function dn(t){!function(t,e){ln[t]=e}(t.getCode(),t),cn(t,t,pn)}function _n(t){return"string"==typeof t?ln[e=t]||ln[e.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\w+)$/,"EPSG:$3")]||null:t||null;var e}function gn(t,e,n,o){var i,r=(t=_n(t)).getPointResolutionFunc();if(r)i=r(e,n),o&&o!==t.getUnits()&&(s=t.getMetersPerUnit())&&(i=i*s/Ne[o]);else{var a=t.getUnits();if(a==Xe.DEGREES&&!o||o==Xe.DEGREES)i=e;else{var s,l=Cn(t,_n("EPSG:4326"));if(l===fn&&a!==Xe.DEGREES)i=e*t.getMetersPerUnit();else{var u=[n[0]-e/2,n[1],n[0]+e/2,n[1],n[0],n[1]-e/2,n[0],n[1]+e/2];i=(hn((u=l(u,u,2)).slice(0,2),u.slice(2,4))+hn(u.slice(4,6),u.slice(6,8)))/2}void 0!==(s=o?Ne[o]:t.getMetersPerUnit())&&(i/=s)}}return i}function vn(t){!function(t){t.forEach(dn)}(t),t.forEach((function(e){t.forEach((function(t){e!==t&&cn(e,t,pn)}))}))}function yn(t,e){return t?"string"==typeof t?_n(t):t:_n(e)}function mn(t,e){return wn(t,"EPSG:4326",void 0!==e?e:"EPSG:3857")}function xn(t,e){if(t===e)return!0;var n=t.getUnits()===e.getUnits();return(t.getCode()===e.getCode()||Cn(t,e)===pn)&&n}function Cn(t,e){var n=function(t,e){var n;return t in un&&e in un[t]&&(n=un[t][e]),n}(t.getCode(),e.getCode());return n||(n=fn),n}function En(t,e){return Cn(_n(t),_n(e))}function wn(t,e,n){return En(e,n)(t,void 0,t.length)}var bn,Pn,Tn,On=null;function Rn(){return On}function Sn(t,e){return t}function Mn(t,e){return t}function In(t,e){return t}function jn(t,e,n){return function(o,i,r,a,s){if(o){var l=e?0:r[0]*i,u=e?0:r[1]*i,c=s?s[0]:0,h=s?s[1]:0,p=t[0]+l/2+c,f=t[2]-l/2+c,d=t[1]+u/2+h,_=t[3]-u/2+h;p>f&&(f=p=(f+p)/2),d>_&&(_=d=(_+d)/2);var g=U(o[0],p,f),v=U(o[1],d,_),y=30*i;return a&&n&&(g+=-y*Math.log(1+Math.max(0,p-o[0])/y)+y*Math.log(1+Math.max(0,o[0]-f)/y),v+=-y*Math.log(1+Math.max(0,d-o[1])/y)+y*Math.log(1+Math.max(0,o[1]-_)/y)),[g,v]}}}function An(t){return t}function Fn(t,e,n,o){var i=G(e)/n[0],r=D(e)/n[1];return o?Math.min(t,Math.max(i,r)):Math.min(t,Math.min(i,r))}function Ln(t,e,n){var o=Math.min(t,e);return o*=Math.log(1+50*Math.max(0,t/e-1))/50+1,n&&(o=Math.max(o,n),o/=Math.log(1+50*Math.max(0,n/t-1))/50+1),U(o,n/2,2*e)}function zn(t,e,n,o,i){return function(r,a,s,l){if(void 0!==r){var u=o?Fn(t,o,s,i):t;return(void 0===n||n)&&l?Ln(r,u,e):U(r,e,u)}}}function Dn(t){return void 0!==t?0:void 0}function kn(t){return void 0!==t?t:void 0}function Kn(t){return Math.pow(t,3)}function Zn(t){return 1-Kn(1-t)}function Gn(t){return 3*t*t-2*t*t*t}function Nn(t){return t}vn(en),vn(sn),bn=en,Pn=function(t,e,n){var o=t.length,i=n>1?n:2,r=e;void 0===r&&(r=i>2?t.slice():new Array(o));for(var a=0;a<o;a+=i){r[a]=Be*t[a]/180;var s=He*Math.log(Math.tan(Math.PI*(+t[a+1]+90)/360));s>Je?s=Je:s<-Je&&(s=-Je),r[a+1]=s}return r},Tn=function(t,e,n){var o=t.length,i=n>1?n:2,r=e;void 0===r&&(r=i>2?t.slice():new Array(o));for(var a=0;a<o;a+=i)r[a]=180*t[a]/Be,r[a+1]=360*Math.atan(Math.exp(t[a+1]/He))/Math.PI-90;return r},sn.forEach((function(t){bn.forEach((function(e){cn(t,e,Pn),cn(e,t,Tn)}))}));const Xn="XY",Un="XYZM";var Vn=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Wn=[1,0,0,1,0,0];const Yn=function(t){function e(){var e,n,i,r,a,s=t.call(this)||this;return s.extent_=[1/0,1/0,-1/0,-1/0],s.extentRevision_=-1,s.simplifiedGeometryMaxMinSquaredTolerance=0,s.simplifiedGeometryRevision=0,s.simplifyTransformedInternal=(e=function(t,e,n){if(!n)return this.getSimplifiedGeometry(e);var o=this.clone();return o.applyTransform(n),o.getSimplifiedGeometry(e)},a=!1,function(){var t=Array.prototype.slice.call(arguments);return a&&this===r&&o(t,i)||(a=!0,r=this,i=t,n=e.apply(this,arguments)),n}),s}return Vn(e,t),e.prototype.simplifyTransformed=function(t,e){return this.simplifyTransformedInternal(this.getRevision(),t,e)},e.prototype.clone=function(){return s()},e.prototype.closestPointXY=function(t,e,n,o){return s()},e.prototype.containsXY=function(t,e){var n=this.getClosestPoint([t,e]);return n[0]===t&&n[1]===e},e.prototype.getClosestPoint=function(t,e){var n=e||[NaN,NaN];return this.closestPointXY(t[0],t[1],n,1/0),n},e.prototype.intersectsCoordinate=function(t){return this.containsXY(t[0],t[1])},e.prototype.computeExtent=function(t){return s()},e.prototype.getExtent=function(t){if(this.extentRevision_!=this.getRevision()){var e=this.computeExtent(this.extent_);(isNaN(e[0])||isNaN(e[1]))&&P(e),this.extentRevision_=this.getRevision()}return function(t,e){return e?(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e):t}(this.extent_,t)},e.prototype.rotate=function(t,e){s()},e.prototype.scale=function(t,e,n){s()},e.prototype.simplify=function(t){return this.getSimplifiedGeometry(t*t)},e.prototype.getSimplifiedGeometry=function(t){return s()},e.prototype.getType=function(){return s()},e.prototype.applyTransform=function(t){s()},e.prototype.intersectsExtent=function(t){return s()},e.prototype.translate=function(t,e){s()},e.prototype.transform=function(t,e){var n=_n(t),o=n.getUnits()==Xe.TILE_PIXELS?function(t,o,i){var r=n.getExtent(),a=n.getWorldExtent(),s=D(a)/D(r);return _(Wn,a[0],a[3],s,-s,0,0,0),function(t,e,n,o,i,r){for(var a=r||[],s=0,l=0;l<n;l+=o){var u=t[l],c=t[l+1];a[s++]=i[0]*u+i[2]*c+i[4],a[s++]=i[1]*u+i[3]*c+i[5]}r&&a.length!=s&&(a.length=s)}(t,0,t.length,i,Wn,o),En(n,e)(t,o,i)}:En(n,e);return this.applyTransform(o),this},e}(Pt);var qn=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();function Hn(t){var e;return t==Xn?e=2:"XYZ"==t||"XYM"==t?e=3:t==Un&&(e=4),e}const Bn=function(t){function e(){var e=t.call(this)||this;return e.layout=Xn,e.stride=2,e.flatCoordinates=null,e}return qn(e,t),e.prototype.computeExtent=function(t){return e=this.flatCoordinates,n=this.flatCoordinates.length,o=this.stride,R(P(t),e,0,n,o);var e,n,o},e.prototype.getCoordinates=function(){return s()},e.prototype.getFirstCoordinate=function(){return this.flatCoordinates.slice(0,this.stride)},e.prototype.getFlatCoordinates=function(){return this.flatCoordinates},e.prototype.getLastCoordinate=function(){return this.flatCoordinates.slice(this.flatCoordinates.length-this.stride)},e.prototype.getLayout=function(){return this.layout},e.prototype.getSimplifiedGeometry=function(t){if(this.simplifiedGeometryRevision!==this.getRevision()&&(this.simplifiedGeometryMaxMinSquaredTolerance=0,this.simplifiedGeometryRevision=this.getRevision()),t<0||0!==this.simplifiedGeometryMaxMinSquaredTolerance&&t<=this.simplifiedGeometryMaxMinSquaredTolerance)return this;var e=this.getSimplifiedGeometryInternal(t);return e.getFlatCoordinates().length<this.flatCoordinates.length?e:(this.simplifiedGeometryMaxMinSquaredTolerance=t,this)},e.prototype.getSimplifiedGeometryInternal=function(t){return this},e.prototype.getStride=function(){return this.stride},e.prototype.setFlatCoordinates=function(t,e){this.stride=Hn(t),this.layout=t,this.flatCoordinates=e},e.prototype.setCoordinates=function(t,e){s()},e.prototype.setLayout=function(t,e,n){var o;if(t)o=Hn(t);else{for(var i=0;i<n;++i){if(0===e.length)return this.layout=Xn,void(this.stride=2);e=e[0]}t=function(t){var e;return 2==t?e=Xn:3==t?e="XYZ":4==t&&(e=Un),e}(o=e.length)}this.layout=t,this.stride=o},e.prototype.applyTransform=function(t){this.flatCoordinates&&(t(this.flatCoordinates,this.flatCoordinates,this.stride),this.changed())},e.prototype.rotate=function(t,e){var n=this.getFlatCoordinates();if(n){var o=this.getStride();!function(t,e,n,o,i,r,a){for(var s=a||[],l=Math.cos(i),u=Math.sin(i),c=r[0],h=r[1],p=0,f=0;f<n;f+=o){var d=t[f]-c,_=t[f+1]-h;s[p++]=c+d*l-_*u,s[p++]=h+d*u+_*l;for(var g=f+2;g<f+o;++g)s[p++]=t[g]}a&&s.length!=p&&(s.length=p)}(n,0,n.length,o,t,e,n),this.changed()}},e.prototype.scale=function(t,e,n){var o=e;void 0===o&&(o=t);var i=n;i||(i=F(this.getExtent()));var r=this.getFlatCoordinates();if(r){var a=this.getStride();!function(t,e,n,o,i,r,a,s){for(var l=s||[],u=a[0],c=a[1],h=0,p=0;p<n;p+=o){var f=t[p]-u,d=t[p+1]-c;l[h++]=u+i*f,l[h++]=c+r*d;for(var _=p+2;_<p+o;++_)l[h++]=t[_]}s&&l.length!=h&&(l.length=h)}(r,0,r.length,a,t,o,i,r),this.changed()}},e.prototype.translate=function(t,e){var n=this.getFlatCoordinates();if(n){var o=this.getStride();!function(t,e,n,o,i,r,a){for(var s=a||[],l=0,u=0;u<n;u+=o){s[l++]=t[u]+i,s[l++]=t[u+1]+r;for(var c=u+2;c<u+o;++c)s[l++]=t[c]}a&&s.length!=l&&(s.length=l)}(n,0,n.length,o,t,e,n),this.changed()}},e}(Yn);function Qn(t,e,n,o,i,r,a){var s,l=t[e],u=t[e+1],c=t[n]-l,h=t[n+1]-u;if(0===c&&0===h)s=e;else{var p=((i-l)*c+(r-u)*h)/(c*c+h*h);if(p>1)s=n;else{if(p>0){for(var f=0;f<o;++f)a[f]=Q(t[e+f],t[n+f],p);return void(a.length=o)}s=e}}for(f=0;f<o;++f)a[f]=t[s+f];a.length=o}function $n(t,e,n,o,i){var r=t[e],a=t[e+1];for(e+=o;e<n;e+=o){var s=t[e],l=t[e+1],u=q(r,a,s,l);u>i&&(i=u),r=s,a=l}return i}function Jn(t,e,n,o,i,r,a,s,l,u,c){if(e==n)return u;var h,p;if(0===i){if((p=q(a,s,t[e],t[e+1]))<u){for(h=0;h<o;++h)l[h]=t[e+h];return l.length=o,p}return u}for(var f=c||[NaN,NaN],d=e+o;d<n;)if(Qn(t,d-o,d,o,a,s,f),(p=q(a,s,f[0],f[1]))<u){for(u=p,h=0;h<o;++h)l[h]=f[h];l.length=o,d+=o}else d+=o*Math.max((Math.sqrt(p)-Math.sqrt(u))/i|0,1);if(r&&(Qn(t,n-o,e,o,a,s,f),(p=q(a,s,f[0],f[1]))<u)){for(u=p,h=0;h<o;++h)l[h]=f[h];l.length=o}return u}function to(t,e,n,o){for(var i=0,r=n.length;i<r;++i)for(var a=n[i],s=0;s<o;++s)t[e++]=a[s];return e}function eo(t,e){return e*Math.round(t/e)}function no(t,e,n,o,i,r,a){if(e==n)return a;var s,l,u=eo(t[e],i),c=eo(t[e+1],i);e+=o,r[a++]=u,r[a++]=c;do{if(s=eo(t[e],i),l=eo(t[e+1],i),(e+=o)==n)return r[a++]=s,r[a++]=l,a}while(s==u&&l==c);for(;e<n;){var h=eo(t[e],i),p=eo(t[e+1],i);if(e+=o,h!=s||p!=l){var f=s-u,d=l-c,_=h-u,g=p-c;f*g==d*_&&(f<0&&_<f||f==_||f>0&&_>f)&&(d<0&&g<d||d==g||d>0&&g>d)?(s=h,l=p):(r[a++]=s,r[a++]=l,u=s,c=l,s=h,l=p)}}return r[a++]=s,r[a++]=l,a}function oo(t,e,n,o,i){for(var r=void 0!==i?i:[],a=0,s=e;s<n;s+=o)r[a++]=t.slice(s,s+o);return r.length=a,r}function io(t,e,n,o){for(var i=0,r=t[n-o],a=t[n-o+1];e<n;e+=o){var s=t[e],l=t[e+1];i+=a*s-r*l,r=s,a=l}return i/2}var ro=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const ao=function(t){function e(e,n){var o=t.call(this)||this;return o.maxDelta_=-1,o.maxDeltaRevision_=-1,void 0===n||Array.isArray(e[0])?o.setCoordinates(e,n):o.setFlatCoordinates(n,e),o}return ro(e,t),e.prototype.clone=function(){return new e(this.flatCoordinates.slice(),this.layout)},e.prototype.closestPointXY=function(t,e,n,o){return o<x(this.getExtent(),t,e)?o:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt($n(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),Jn(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,this.maxDelta_,!0,t,e,n,o))},e.prototype.getArea=function(){return io(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getCoordinates=function(){return oo(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getSimplifiedGeometryInternal=function(t){var n=[];return n.length=function(t,e,n,o,i,r,a){var s=(n-e)/o;if(s<3){for(;e<n;e+=o)r[a++]=t[e],r[a++]=t[e+1];return a}var l=new Array(s);l[0]=1,l[s-1]=1;for(var u=[e,n-o],c=0;u.length>0;){for(var h=u.pop(),p=u.pop(),f=0,d=t[p],_=t[p+1],g=t[h],v=t[h+1],y=p+o;y<h;y+=o){var m=Y(t[y],t[y+1],d,_,g,v);m>f&&(c=y,f=m)}f>i&&(l[(c-e)/o]=1,p+o<c&&u.push(p,c),c+o<h&&u.push(c,h))}for(y=0;y<s;++y)l[y]&&(r[a++]=t[e+y*o],r[a++]=t[e+y*o+1]);return a}(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,n,0),new e(n,Xn)},e.prototype.getType=function(){return"LinearRing"},e.prototype.intersectsExtent=function(t){return!1},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=to(this.flatCoordinates,0,t,this.stride),this.changed()},e}(Bn);var so=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const lo=function(t){function e(e,n){var o=t.call(this)||this;return o.setCoordinates(e,n),o}return so(e,t),e.prototype.clone=function(){var t=new e(this.flatCoordinates.slice(),this.layout);return t.applyProperties(this),t},e.prototype.closestPointXY=function(t,e,n,o){var i=this.flatCoordinates,r=q(t,e,i[0],i[1]);if(r<o){for(var a=this.stride,s=0;s<a;++s)n[s]=i[s];return n.length=a,r}return o},e.prototype.getCoordinates=function(){return this.flatCoordinates?this.flatCoordinates.slice():[]},e.prototype.computeExtent=function(t){return n=t,b(o=(e=this.flatCoordinates)[0],i=e[1],o,i,n);var e,n,o,i},e.prototype.getType=function(){return"Point"},e.prototype.intersectsExtent=function(t){return E(t,this.flatCoordinates[0],this.flatCoordinates[1])},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,0),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=function(t,e,n,o){for(var i=0,r=n.length;i<r;++i)t[e++]=n[i];return e}(this.flatCoordinates,0,t,this.stride),this.changed()},e}(Bn);function uo(t,e,n,o,i){return!M(i,(function(i){return!co(t,e,n,o,i[0],i[1])}))}function co(t,e,n,o,i,r){for(var a=0,s=t[n-o],l=t[n-o+1];e<n;e+=o){var u=t[e],c=t[e+1];l<=r?c>r&&(u-s)*(r-l)-(i-s)*(c-l)>0&&a++:c<=r&&(u-s)*(r-l)-(i-s)*(c-l)<0&&a--,s=u,l=c}return 0!==a}function ho(t,e,n,o,i,r){if(0===n.length)return!1;if(!co(t,e,n[0],o,i,r))return!1;for(var a=1,s=n.length;a<s;++a)if(co(t,n[a-1],n[a],o,i,r))return!1;return!0}function po(t,e,n,o,i){var r,a,s=R([1/0,1/0,-1/0,-1/0],t,e,n,o);return!!N(i,s)&&(a=s,(r=i)[0]<=a[0]&&a[2]<=r[2]&&r[1]<=a[1]&&a[3]<=r[3]||s[0]>=i[0]&&s[2]<=i[2]||s[1]>=i[1]&&s[3]<=i[3]||function(t,e,n,o,i){for(var r,a=[t[e],t[e+1]],s=[];e+o<n;e+=o){if(s[0]=t[e+o],s[1]=t[e+o+1],r=i(a,s))return r;a[0]=s[0],a[1]=s[1]}return!1}(t,e,n,o,(function(t,e){return function(t,e,n){var o=!1,i=w(t,e),r=w(t,n);if(1===i||1===r)o=!0;else{var a=t[0],s=t[1],l=t[2],u=t[3],c=e[0],h=e[1],p=n[0],f=n[1],d=(f-h)/(p-c),_=void 0,g=void 0;2&r&&!(2&i)&&(o=(_=p-(f-u)/d)>=a&&_<=l),o||!(4&r)||4&i||(o=(g=f-(p-l)*d)>=s&&g<=u),o||!(8&r)||8&i||(o=(_=p-(f-s)/d)>=a&&_<=l),o||!(16&r)||16&i||(o=(g=f-(p-a)*d)>=s&&g<=u)}return o}(i,t,e)})))}function fo(t,e,n,o){for(;e<n-o;){for(var i=0;i<o;++i){var r=t[e+i];t[e+i]=t[n-o+i],t[n-o+i]=r}e+=o,n-=o}}function _o(t,e,n,o){for(var i=0,r=t[n-o],a=t[n-o+1];e<n;e+=o){var s=t[e],l=t[e+1];i+=(s-r)*(l+a),r=s,a=l}return 0===i?void 0:i>0}function go(t,e,n,o,i){for(var r=void 0!==i&&i,a=0,s=n.length;a<s;++a){var l=n[a],u=_o(t,e,l,o);(0===a?r&&u||!r&&!u:r&&!u||!r&&u)&&fo(t,e,l,o),e=l}return e}var vo=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),yo=function(t){function n(e,n,o){var i=t.call(this)||this;return i.ends_=[],i.flatInteriorPointRevision_=-1,i.flatInteriorPoint_=null,i.maxDelta_=-1,i.maxDeltaRevision_=-1,i.orientedRevision_=-1,i.orientedFlatCoordinates_=null,void 0!==n&&o?(i.setFlatCoordinates(n,e),i.ends_=o):i.setCoordinates(e,n),i}return vo(n,t),n.prototype.appendLinearRing=function(t){this.flatCoordinates?function(t,e){for(var n=Array.isArray(e)?e:[e],o=n.length,i=0;i<o;i++)t[t.length]=n[i]}(this.flatCoordinates,t.getFlatCoordinates()):this.flatCoordinates=t.getFlatCoordinates().slice(),this.ends_.push(this.flatCoordinates.length),this.changed()},n.prototype.clone=function(){var t=new n(this.flatCoordinates.slice(),this.layout,this.ends_.slice());return t.applyProperties(this),t},n.prototype.closestPointXY=function(t,e,n,o){return o<x(this.getExtent(),t,e)?o:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(function(t,e,n,o,i){for(var r=0,a=n.length;r<a;++r){var s=n[r];i=$n(t,e,s,o,i),e=s}return i}(this.flatCoordinates,0,this.ends_,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),function(t,e,n,o,i,r,a,s,l,u,c){for(var h=c||[NaN,NaN],p=0,f=n.length;p<f;++p){var d=n[p];u=Jn(t,e,d,o,i,r,a,s,l,u,h),e=d}return u}(this.flatCoordinates,0,this.ends_,this.stride,this.maxDelta_,!0,t,e,n,o))},n.prototype.containsXY=function(t,e){return ho(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,e)},n.prototype.getArea=function(){return function(t,e,n,o){for(var i=0,r=0,a=n.length;r<a;++r){var s=n[r];i+=io(t,e,s,o),e=s}return i}(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride)},n.prototype.getCoordinates=function(t){var e;return void 0!==t?go(e=this.getOrientedFlatCoordinates().slice(),0,this.ends_,this.stride,t):e=this.flatCoordinates,function(t,e,n,o,i){for(var r=void 0!==i?i:[],a=0,s=0,l=n.length;s<l;++s){var u=n[s];r[a++]=oo(t,e,u,o,r[a]),e=u}return r.length=a,r}(e,0,this.ends_,this.stride)},n.prototype.getEnds=function(){return this.ends_},n.prototype.getFlatInteriorPoint=function(){if(this.flatInteriorPointRevision_!=this.getRevision()){var t=F(this.getExtent());this.flatInteriorPoint_=function(t,n,o,i,r,a,s){for(var l,u,c,h,p,f,d,_=r[a+1],g=[],v=0,y=o.length;v<y;++v){var m=o[v];for(h=t[m-i],f=t[m-i+1],l=n;l<m;l+=i)p=t[l],d=t[l+1],(_<=f&&d<=_||f<=_&&_<=d)&&(c=(_-f)/(d-f)*(p-h)+h,g.push(c)),h=p,f=d}var x=NaN,C=-1/0;for(g.sort(e),h=g[0],l=1,u=g.length;l<u;++l){p=g[l];var E=Math.abs(p-h);E>C&&ho(t,n,o,i,c=(h+p)/2,_)&&(x=c,C=E),h=p}return isNaN(x)&&(x=r[a]),s?(s.push(x,_,C),s):[x,_,C]}(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,0),this.flatInteriorPointRevision_=this.getRevision()}return this.flatInteriorPoint_},n.prototype.getInteriorPoint=function(){return new lo(this.getFlatInteriorPoint(),"XYM")},n.prototype.getLinearRingCount=function(){return this.ends_.length},n.prototype.getLinearRing=function(t){return t<0||this.ends_.length<=t?null:new ao(this.flatCoordinates.slice(0===t?0:this.ends_[t-1],this.ends_[t]),this.layout)},n.prototype.getLinearRings=function(){for(var t=this.layout,e=this.flatCoordinates,n=this.ends_,o=[],i=0,r=0,a=n.length;r<a;++r){var s=n[r],l=new ao(e.slice(i,s),t);o.push(l),i=s}return o},n.prototype.getOrientedFlatCoordinates=function(){if(this.orientedRevision_!=this.getRevision()){var t=this.flatCoordinates;!function(t,e,n,o,i){for(var r=void 0!==i&&i,a=0,s=n.length;a<s;++a){var l=n[a],u=_o(t,e,l,o);if(0===a){if(r&&u||!r&&!u)return!1}else if(r&&!u||!r&&u)return!1;e=l}return!0}(t,0,this.ends_,this.stride)?(this.orientedFlatCoordinates_=t.slice(),this.orientedFlatCoordinates_.length=go(this.orientedFlatCoordinates_,0,this.ends_,this.stride)):this.orientedFlatCoordinates_=t,this.orientedRevision_=this.getRevision()}return this.orientedFlatCoordinates_},n.prototype.getSimplifiedGeometryInternal=function(t){var e=[],o=[];return e.length=function(t,e,n,o,i,r,a,s){for(var l=0,u=n.length;l<u;++l){var c=n[l];a=no(t,e,c,o,i,r,a),s.push(a),e=c}return a}(this.flatCoordinates,0,this.ends_,this.stride,Math.sqrt(t),e,0,o),new n(e,Xn,o)},n.prototype.getType=function(){return"Polygon"},n.prototype.intersectsExtent=function(t){return function(t,e,n,o,i){if(!function(t,e,n,o,i){return!!(po(t,e,n,o,i)||co(t,e,n,o,i[0],i[1])||co(t,e,n,o,i[0],i[3])||co(t,e,n,o,i[2],i[1])||co(t,e,n,o,i[2],i[3]))}(t,e,n[0],o,i))return!1;if(1===n.length)return!0;for(var r=1,a=n.length;r<a;++r)if(uo(t,n[r-1],n[r],o,i)&&!po(t,n[r-1],n[r],o,i))return!1;return!0}(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t)},n.prototype.setCoordinates=function(t,e){this.setLayout(e,t,2),this.flatCoordinates||(this.flatCoordinates=[]);var n=function(t,e,n,o,i){for(var r=i||[],a=0,s=0,l=n.length;s<l;++s){var u=to(t,e,n[s],o);r[a++]=u,e=u}return r.length=a,r}(this.flatCoordinates,0,t,this.stride,this.ends_);this.flatCoordinates.length=0===n.length?0:n[n.length-1],this.changed()},n}(Bn);const mo=yo;function xo(t){var e=t[0],n=t[1],o=t[2],i=t[3],r=[e,n,e,i,o,i,o,n,e,n];return new yo(r,Xn,[r.length])}var Co=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();function Eo(t,e){setTimeout((function(){t(e)}),0)}function wo(t){return!(t.sourceCenter&&t.targetCenter&&!Ut(t.sourceCenter,t.targetCenter))&&t.sourceResolution===t.targetResolution&&t.sourceRotation===t.targetRotation}function bo(t,e,n,o,i){var r=Math.cos(-i),a=Math.sin(-i),s=t[0]*r-t[1]*a,l=t[1]*r+t[0]*a;return[(s+=(e[0]/2-n[0])*o)*r-(l+=(n[1]-e[1]/2)*o)*(a=-a),l*r+s*a]}const Po=function(t){function e(e){var n=t.call(this)||this,o=nt({},e);return n.hints_=[0,0],n.animations_=[],n.updateAnimationKey_,n.projection_=yn(o.projection,"EPSG:3857"),n.viewportSize_=[100,100],n.targetCenter_=null,n.targetResolution_,n.targetRotation_,n.cancelAnchor_=void 0,o.center&&(o.center=Mn(o.center,n.projection_)),o.extent&&(o.extent=In(o.extent,n.projection_)),n.applyOptions_(o),n}return Co(e,t),e.prototype.applyOptions_=function(t){var e=function(t){var e,o,i,r=void 0!==t.minZoom?t.minZoom:0,a=void 0!==t.maxZoom?t.maxZoom:28,s=void 0!==t.zoomFactor?t.zoomFactor:2,l=void 0!==t.multiWorld&&t.multiWorld,u=void 0===t.smoothResolutionConstraint||t.smoothResolutionConstraint,c=void 0!==t.showFullExtent&&t.showFullExtent,h=yn(t.projection,"EPSG:3857"),p=h.getExtent(),f=t.constrainOnlyCenter,d=t.extent;if(l||d||!h.isGlobal()||(f=!1,d=p),void 0!==t.resolutions){var _=t.resolutions;o=_[r],i=void 0!==_[a]?_[a]:_[_.length-1],e=t.constrainResolution?function(t,e,o,i){return function(r,a,s,l){if(void 0!==r){var u=t[0],c=t[t.length-1],h=o?Fn(u,o,s,i):u;if(l)return void 0===e||e?Ln(r,h,c):U(r,c,h);var p=Math.min(h,r),f=Math.floor(n(t,p,a));return t[f]>h&&f<t.length-1?t[f+1]:t[f]}}}(_,u,!f&&d,c):zn(o,i,u,!f&&d,c)}else{var g=(p?Math.max(G(p),D(p)):360*Ne[Xe.DEGREES]/h.getMetersPerUnit())/256/Math.pow(2,0),v=g/Math.pow(2,28);void 0!==(o=t.maxResolution)?r=0:o=g/Math.pow(s,r),void 0===(i=t.minResolution)&&(i=void 0!==t.maxZoom?void 0!==t.maxResolution?o/Math.pow(s,a):g/Math.pow(s,a):v),a=r+Math.floor(Math.log(o/i)/Math.log(s)),i=o/Math.pow(s,a-r),e=t.constrainResolution?function(t,e,n,o,i,r){return function(a,s,l,u){if(void 0!==a){var c=i?Fn(e,i,l,r):e,h=void 0!==n?n:0;if(u)return void 0===o||o?Ln(a,c,h):U(a,h,c);var p=Math.ceil(Math.log(e/c)/Math.log(t)-1e-9),f=-s*(.5-1e-9)+.5,d=Math.min(c,a),_=Math.floor(Math.log(e/d)/Math.log(t)+f),g=Math.max(p,_);return U(e/Math.pow(t,g),h,c)}}}(s,o,i,u,!f&&d,c):zn(o,i,u,!f&&d,c)}return{constraint:e,maxResolution:o,minResolution:i,minZoom:r,zoomFactor:s}}(t);this.maxResolution_=e.maxResolution,this.minResolution_=e.minResolution,this.zoomFactor_=e.zoomFactor,this.resolutions_=t.resolutions,this.padding=t.padding,this.minZoom_=e.minZoom;var o=function(t){if(void 0!==t.extent){var e=void 0===t.smoothExtentConstraint||t.smoothExtentConstraint;return jn(t.extent,t.constrainOnlyCenter,e)}var n=yn(t.projection,"EPSG:3857");if(!0!==t.multiWorld&&n.isGlobal()){var o=n.getExtent().slice();return o[0]=-1/0,o[2]=1/0,jn(o,!1,!1)}return An}(t),i=e.constraint,r=function(t){if(void 0===t.enableRotation||t.enableRotation){var e=t.constrainRotation;return void 0===e||!0===e?(i=H(5),function(t,e){return e?t:void 0!==t?Math.abs(t)<=i?0:t:void 0}):!1===e?kn:"number"==typeof e?(n=e,o=2*Math.PI/n,function(t,e){return e?t:void 0!==t?t=Math.floor(t/o+.5)*o:void 0}):kn}return Dn;var n,o,i}(t);this.constraints_={center:o,resolution:i,rotation:r},this.setRotation(void 0!==t.rotation?t.rotation:0),this.setCenterInternal(void 0!==t.center?t.center:null),void 0!==t.resolution?this.setResolution(t.resolution):void 0!==t.zoom&&this.setZoom(t.zoom),this.setProperties({}),this.options_=t},e.prototype.getUpdatedOptions_=function(t){var e=nt({},this.options_);return void 0!==e.resolution?e.resolution=this.getResolution():e.zoom=this.getZoom(),e.center=this.getCenterInternal(),e.rotation=this.getRotation(),nt({},e,t)},e.prototype.animate=function(t){this.isDef()&&!this.getAnimating()&&this.resolveConstraints(0);for(var e=new Array(arguments.length),n=0;n<e.length;++n){var o=arguments[n];o.center&&((o=nt({},o)).center=Mn(o.center,this.getProjection())),o.anchor&&((o=nt({},o)).anchor=Mn(o.anchor,this.getProjection())),e[n]=o}this.animateInternal.apply(this,e)},e.prototype.animateInternal=function(t){var e,n=arguments.length;if(n>1&&"function"==typeof arguments[n-1]&&(e=arguments[n-1],--n),!this.isDef()){var o=arguments[n-1];return o.center&&this.setCenterInternal(o.center),void 0!==o.zoom&&this.setZoom(o.zoom),void 0!==o.rotation&&this.setRotation(o.rotation),void(e&&Eo(e,!0))}for(var i=Date.now(),r=this.targetCenter_.slice(),a=this.targetResolution_,s=this.targetRotation_,l=[],u=0;u<n;++u){var c=arguments[u],h={start:i,complete:!1,anchor:c.anchor,duration:void 0!==c.duration?c.duration:1e3,easing:c.easing||Gn,callback:e};if(c.center&&(h.sourceCenter=r,h.targetCenter=c.center.slice(),r=h.targetCenter),void 0!==c.zoom?(h.sourceResolution=a,h.targetResolution=this.getResolutionForZoom(c.zoom),a=h.targetResolution):c.resolution&&(h.sourceResolution=a,h.targetResolution=c.resolution,a=h.targetResolution),void 0!==c.rotation){h.sourceRotation=s;var p=B(c.rotation-s+Math.PI,2*Math.PI)-Math.PI;h.targetRotation=s+p,s=h.targetRotation}wo(h)?h.complete=!0:i+=h.duration,l.push(h)}this.animations_.push(l),this.setHint(0,1),this.updateAnimations_()},e.prototype.getAnimating=function(){return this.hints_[0]>0},e.prototype.getInteracting=function(){return this.hints_[1]>0},e.prototype.cancelAnimations=function(){var t;this.setHint(0,-this.hints_[0]);for(var e=0,n=this.animations_.length;e<n;++e){var o=this.animations_[e];if(o[0].callback&&Eo(o[0].callback,!1),!t)for(var i=0,r=o.length;i<r;++i){var a=o[i];if(!a.complete){t=a.anchor;break}}}this.animations_.length=0,this.cancelAnchor_=t},e.prototype.updateAnimations_=function(){if(void 0!==this.updateAnimationKey_&&(cancelAnimationFrame(this.updateAnimationKey_),this.updateAnimationKey_=void 0),this.getAnimating()){for(var t=Date.now(),e=!1,n=this.animations_.length-1;n>=0;--n){for(var o=this.animations_[n],i=!0,r=0,a=o.length;r<a;++r){var s=o[r];if(!s.complete){var l=t-s.start,u=s.duration>0?l/s.duration:1;u>=1?(s.complete=!0,u=1):i=!1;var c=s.easing(u);if(s.sourceCenter){var h=s.sourceCenter[0],p=s.sourceCenter[1],f=h+c*(s.targetCenter[0]-h),d=p+c*(s.targetCenter[1]-p);this.targetCenter_=[f,d]}if(s.sourceResolution&&s.targetResolution){var _=1===c?s.targetResolution:s.sourceResolution+c*(s.targetResolution-s.sourceResolution);if(s.anchor){var g=this.getViewportSize_(this.getRotation()),v=this.constraints_.resolution(_,0,g,!0);this.targetCenter_=this.calculateCenterZoom(v,s.anchor)}this.targetResolution_=_,this.applyTargetState_(!0)}if(void 0!==s.sourceRotation&&void 0!==s.targetRotation){var y=1===c?B(s.targetRotation+Math.PI,2*Math.PI)-Math.PI:s.sourceRotation+c*(s.targetRotation-s.sourceRotation);if(s.anchor){var m=this.constraints_.rotation(y,!0);this.targetCenter_=this.calculateCenterRotate(m,s.anchor)}this.targetRotation_=y}if(this.applyTargetState_(!0),e=!0,!s.complete)break}}if(i){this.animations_[n]=null,this.setHint(0,-1);var x=o[0].callback;x&&Eo(x,!0)}}this.animations_=this.animations_.filter(Boolean),e&&void 0===this.updateAnimationKey_&&(this.updateAnimationKey_=requestAnimationFrame(this.updateAnimations_.bind(this)))}},e.prototype.calculateCenterRotate=function(t,e){var n,o,i,r=this.getCenterInternal();return void 0!==r&&(Vt(n=[r[0]-e[0],r[1]-e[1]],t-this.getRotation()),i=e,(o=n)[0]+=+i[0],o[1]+=+i[1]),n},e.prototype.calculateCenterZoom=function(t,e){var n,o=this.getCenterInternal(),i=this.getResolution();return void 0!==o&&void 0!==i&&(n=[e[0]-t*(e[0]-o[0])/i,e[1]-t*(e[1]-o[1])/i]),n},e.prototype.getViewportSize_=function(t){var e=this.viewportSize_;if(t){var n=e[0],o=e[1];return[Math.abs(n*Math.cos(t))+Math.abs(o*Math.sin(t)),Math.abs(n*Math.sin(t))+Math.abs(o*Math.cos(t))]}return e},e.prototype.setViewportSize=function(t){this.viewportSize_=Array.isArray(t)?t.slice():[100,100],this.getAnimating()||this.resolveConstraints(0)},e.prototype.getCenter=function(){var t=this.getCenterInternal();return t?Sn(t,this.getProjection()):t},e.prototype.getCenterInternal=function(){return this.get(Ue)},e.prototype.getConstraints=function(){return this.constraints_},e.prototype.getConstrainResolution=function(){return this.options_.constrainResolution},e.prototype.getHints=function(t){return void 0!==t?(t[0]=this.hints_[0],t[1]=this.hints_[1],t):this.hints_.slice()},e.prototype.calculateExtent=function(t){return e=this.calculateExtentInternal(t),this.getProjection(),e;var e},e.prototype.calculateExtentInternal=function(t){var e=t||this.getViewportSize_(),n=this.getCenterInternal();f(n,1);var o=this.getResolution();f(void 0!==o,2);var i=this.getRotation();return f(void 0!==i,3),z(n,o,i,e)},e.prototype.getMaxResolution=function(){return this.maxResolution_},e.prototype.getMinResolution=function(){return this.minResolution_},e.prototype.getMaxZoom=function(){return this.getZoomForResolution(this.minResolution_)},e.prototype.setMaxZoom=function(t){this.applyOptions_(this.getUpdatedOptions_({maxZoom:t}))},e.prototype.getMinZoom=function(){return this.getZoomForResolution(this.maxResolution_)},e.prototype.setMinZoom=function(t){this.applyOptions_(this.getUpdatedOptions_({minZoom:t}))},e.prototype.setConstrainResolution=function(t){this.applyOptions_(this.getUpdatedOptions_({constrainResolution:t}))},e.prototype.getProjection=function(){return this.projection_},e.prototype.getResolution=function(){return this.get(Ve)},e.prototype.getResolutions=function(){return this.resolutions_},e.prototype.getResolutionForExtent=function(t,e){return this.getResolutionForExtentInternal(In(t,this.getProjection()),e)},e.prototype.getResolutionForExtentInternal=function(t,e){var n=e||this.getViewportSize_(),o=G(t)/n[0],i=D(t)/n[1];return Math.max(o,i)},e.prototype.getResolutionForValueFunction=function(t){var e=t||2,n=this.getConstrainedResolution(this.maxResolution_),o=this.minResolution_,i=Math.log(n/o)/Math.log(e);return function(t){return n/Math.pow(e,t*i)}},e.prototype.getRotation=function(){return this.get(We)},e.prototype.getValueForResolutionFunction=function(t){var e=Math.log(t||2),n=this.getConstrainedResolution(this.maxResolution_),o=this.minResolution_,i=Math.log(n/o)/e;return function(t){return Math.log(n/t)/e/i}},e.prototype.getViewportSizeMinusPadding_=function(t){var e=this.getViewportSize_(t),n=this.padding;return n&&(e=[e[0]-n[1]-n[3],e[1]-n[0]-n[2]]),e},e.prototype.getState=function(){var t=this.getProjection(),e=this.getResolution(),n=this.getRotation(),o=this.getCenterInternal(),i=this.padding;if(i){var r=this.getViewportSizeMinusPadding_();o=bo(o,this.getViewportSize_(),[r[0]/2+i[3],r[1]/2+i[0]],e,n)}return{center:o.slice(0),projection:void 0!==t?t:null,resolution:e,rotation:n,zoom:this.getZoom()}},e.prototype.getZoom=function(){var t,e=this.getResolution();return void 0!==e&&(t=this.getZoomForResolution(e)),t},e.prototype.getZoomForResolution=function(t){var e,o,i=this.minZoom_||0;if(this.resolutions_){var r=n(this.resolutions_,t,1);i=r,e=this.resolutions_[r],o=r==this.resolutions_.length-1?2:e/this.resolutions_[r+1]}else e=this.maxResolution_,o=this.zoomFactor_;return i+Math.log(e/t)/Math.log(o)},e.prototype.getResolutionForZoom=function(t){if(this.resolutions_){if(this.resolutions_.length<=1)return 0;var e=U(Math.floor(t),0,this.resolutions_.length-2),n=this.resolutions_[e]/this.resolutions_[e+1];return this.resolutions_[e]/Math.pow(n,U(t-e,0,1))}return this.maxResolution_/Math.pow(this.zoomFactor_,t-this.minZoom_)},e.prototype.fit=function(t,e){var n;if(f(Array.isArray(t)||"function"==typeof t.getSimplifiedGeometry,24),Array.isArray(t))f(!X(t),25),n=xo(o=In(t,this.getProjection()));else if("Circle"===t.getType()){var o;(n=xo(o=In(t.getExtent(),this.getProjection()))).rotate(this.getRotation(),F(o))}else{var i=Rn();n=i?t.clone().transform(i,this.getProjection()):t}this.fitInternal(n,e)},e.prototype.fitInternal=function(t,e){var n=e||{},o=n.size;o||(o=this.getViewportSizeMinusPadding_());var i,r=void 0!==n.padding?n.padding:[0,0,0,0],s=void 0!==n.nearest&&n.nearest;i=void 0!==n.minResolution?n.minResolution:void 0!==n.maxZoom?this.getResolutionForZoom(n.maxZoom):0;for(var l=t.getFlatCoordinates(),u=this.getRotation(),c=Math.cos(-u),h=Math.sin(-u),p=1/0,f=1/0,d=-1/0,_=-1/0,g=t.getStride(),v=0,y=l.length;v<y;v+=g){var m=l[v]*c-l[v+1]*h,x=l[v]*h+l[v+1]*c;p=Math.min(p,m),f=Math.min(f,x),d=Math.max(d,m),_=Math.max(_,x)}var C=this.getResolutionForExtentInternal([p,f,d,_],[o[0]-r[1]-r[3],o[1]-r[0]-r[2]]);C=isNaN(C)?i:Math.max(C,i),C=this.getConstrainedResolution(C,s?0:1),h=-h;var E=(p+d)/2,w=(f+_)/2,b=(E+=(r[1]-r[3])/2*C)*c-(w+=(r[0]-r[2])/2*C)*h,P=w*c+E*h,T=this.getConstrainedCenter([b,P],C),O=n.callback?n.callback:a;void 0!==n.duration?this.animateInternal({resolution:C,center:T,duration:n.duration,easing:n.easing},O):(this.targetResolution_=C,this.targetCenter_=T,this.applyTargetState_(!1,!0),Eo(O,!0))},e.prototype.centerOn=function(t,e,n){this.centerOnInternal(Mn(t,this.getProjection()),e,n)},e.prototype.centerOnInternal=function(t,e,n){this.setCenterInternal(bo(t,e,n,this.getResolution(),this.getRotation()))},e.prototype.calculateCenterShift=function(t,e,n,o){var i,r=this.padding;if(r&&t){var a=this.getViewportSizeMinusPadding_(-n),s=bo(t,o,[a[0]/2+r[3],a[1]/2+r[0]],e,n);i=[t[0]-s[0],t[1]-s[1]]}return i},e.prototype.isDef=function(){return!!this.getCenterInternal()&&void 0!==this.getResolution()},e.prototype.adjustCenter=function(t){var e=Sn(this.targetCenter_,this.getProjection());this.setCenter([e[0]+t[0],e[1]+t[1]])},e.prototype.adjustCenterInternal=function(t){var e=this.targetCenter_;this.setCenterInternal([e[0]+t[0],e[1]+t[1]])},e.prototype.adjustResolution=function(t,e){var n=e&&Mn(e,this.getProjection());this.adjustResolutionInternal(t,n)},e.prototype.adjustResolutionInternal=function(t,e){var n=this.getAnimating()||this.getInteracting(),o=this.getViewportSize_(this.getRotation()),i=this.constraints_.resolution(this.targetResolution_*t,0,o,n);e&&(this.targetCenter_=this.calculateCenterZoom(i,e)),this.targetResolution_*=t,this.applyTargetState_()},e.prototype.adjustZoom=function(t,e){this.adjustResolution(Math.pow(this.zoomFactor_,-t),e)},e.prototype.adjustRotation=function(t,e){e&&(e=Mn(e,this.getProjection())),this.adjustRotationInternal(t,e)},e.prototype.adjustRotationInternal=function(t,e){var n=this.getAnimating()||this.getInteracting(),o=this.constraints_.rotation(this.targetRotation_+t,n);e&&(this.targetCenter_=this.calculateCenterRotate(o,e)),this.targetRotation_+=t,this.applyTargetState_()},e.prototype.setCenter=function(t){this.setCenterInternal(Mn(t,this.getProjection()))},e.prototype.setCenterInternal=function(t){this.targetCenter_=t,this.applyTargetState_()},e.prototype.setHint=function(t,e){return this.hints_[t]+=e,this.changed(),this.hints_[t]},e.prototype.setResolution=function(t){this.targetResolution_=t,this.applyTargetState_()},e.prototype.setRotation=function(t){this.targetRotation_=t,this.applyTargetState_()},e.prototype.setZoom=function(t){this.setResolution(this.getResolutionForZoom(t))},e.prototype.applyTargetState_=function(t,e){var n=this.getAnimating()||this.getInteracting()||e,o=this.constraints_.rotation(this.targetRotation_,n),i=this.getViewportSize_(o),r=this.constraints_.resolution(this.targetResolution_,0,i,n),a=this.constraints_.center(this.targetCenter_,r,i,n,this.calculateCenterShift(this.targetCenter_,r,o,i));this.get(We)!==o&&this.set(We,o),this.get(Ve)!==r&&this.set(Ve,r),this.get(Ue)&&Ut(this.get(Ue),a)||this.set(Ue,a),this.getAnimating()&&!t&&this.cancelAnimations(),this.cancelAnchor_=void 0},e.prototype.resolveConstraints=function(t,e,n){var o=void 0!==t?t:200,i=e||0,r=this.constraints_.rotation(this.targetRotation_),a=this.getViewportSize_(r),s=this.constraints_.resolution(this.targetResolution_,i,a),l=this.constraints_.center(this.targetCenter_,s,a,!1,this.calculateCenterShift(this.targetCenter_,s,r,a));if(0===o&&!this.cancelAnchor_)return this.targetResolution_=s,this.targetRotation_=r,this.targetCenter_=l,void this.applyTargetState_();var u=n||(0===o?this.cancelAnchor_:void 0);this.cancelAnchor_=void 0,this.getResolution()===s&&this.getRotation()===r&&this.getCenterInternal()&&Ut(this.getCenterInternal(),l)||(this.getAnimating()&&this.cancelAnimations(),this.animateInternal({rotation:r,center:l,resolution:s,duration:o,easing:Zn,anchor:u}))},e.prototype.beginInteraction=function(){this.resolveConstraints(0),this.setHint(1,1)},e.prototype.endInteraction=function(t,e,n){var o=n&&Mn(n,this.getProjection());this.endInteractionInternal(t,e,o)},e.prototype.endInteractionInternal=function(t,e,n){this.setHint(1,-1),this.resolveConstraints(t,e,n)},e.prototype.getConstrainedCenter=function(t,e){var n=this.getViewportSize_(this.getRotation());return this.constraints_.center(t,e||this.getResolution(),n)},e.prototype.getConstrainedZoom=function(t,e){var n=this.getResolutionForZoom(t);return this.getZoomForResolution(this.getConstrainedResolution(n,e))},e.prototype.getConstrainedResolution=function(t,e){var n=e||0,o=this.getViewportSize_(this.getRotation());return this.constraints_.resolution(t,n,o)},e}(Pt);function To(t,e){return Array.isArray(t)?t:(void 0===e?e=[t,t]:(e[0]=t,e[1]=t),e)}var Oo=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Ro=function(t){function e(e){var n=t.call(this)||this,o=function(t){var e=null;void 0!==t.keyboardEventTarget&&(e="string"==typeof t.keyboardEventTarget?document.getElementById(t.keyboardEventTarget):t.keyboardEventTarget);var n,o,i,r={},a=t.layers&&"function"==typeof t.layers.getLayers?t.layers:new we({layers:t.layers});return r.layergroup=a,r.target=t.target,r.view=void 0!==t.view?t.view:new Po,void 0!==t.controls&&(Array.isArray(t.controls)?n=new xe(t.controls.slice()):(f("function"==typeof t.controls.getArray,47),n=t.controls)),void 0!==t.interactions&&(Array.isArray(t.interactions)?o=new xe(t.interactions.slice()):(f("function"==typeof t.interactions.getArray,48),o=t.interactions)),void 0!==t.overlays?Array.isArray(t.overlays)?i=new xe(t.overlays.slice()):(f("function"==typeof t.overlays.getArray,49),i=t.overlays):i=new xe,{controls:n,interactions:o,keyboardEventTarget:e,overlays:i,values:r}}(e);return n.boundHandleBrowserEvent_=n.handleBrowserEvent.bind(n),n.maxTilesLoading_=void 0!==e.maxTilesLoading?e.maxTilesLoading:16,n.pixelRatio_=void 0!==e.pixelRatio?e.pixelRatio:oe,n.postRenderTimeoutHandle_,n.animationDelayKey_,n.animationDelay_=function(){this.animationDelayKey_=void 0,this.renderFrame_(Date.now())}.bind(n),n.coordinateToPixelTransform_=[1,0,0,1,0,0],n.pixelToCoordinateTransform_=[1,0,0,1,0,0],n.frameIndex_=0,n.frameState_=null,n.previousExtent_=null,n.viewPropertyListenerKey_=null,n.viewChangeListenerKey_=null,n.layerGroupPropertyListenerKeys_=null,n.viewport_=document.createElement("div"),n.viewport_.className="ol-viewport"+("ontouchstart"in window?" ol-touch":""),n.viewport_.style.position="relative",n.viewport_.style.overflow="hidden",n.viewport_.style.width="100%",n.viewport_.style.height="100%",n.overlayContainer_=document.createElement("div"),n.overlayContainer_.style.position="absolute",n.overlayContainer_.style.zIndex="0",n.overlayContainer_.style.width="100%",n.overlayContainer_.style.height="100%",n.overlayContainer_.style.pointerEvents="none",n.overlayContainer_.className="ol-overlaycontainer",n.viewport_.appendChild(n.overlayContainer_),n.overlayContainerStopEvent_=document.createElement("div"),n.overlayContainerStopEvent_.style.position="absolute",n.overlayContainerStopEvent_.style.zIndex="0",n.overlayContainerStopEvent_.style.width="100%",n.overlayContainerStopEvent_.style.height="100%",n.overlayContainerStopEvent_.style.pointerEvents="none",n.overlayContainerStopEvent_.className="ol-overlaycontainer-stopevent",n.viewport_.appendChild(n.overlayContainerStopEvent_),n.mapBrowserEventHandler_=null,n.moveTolerance_=e.moveTolerance,n.keyboardEventTarget_=o.keyboardEventTarget,n.keyHandlerKeys_=null,n.controls=o.controls||new xe,n.interactions=o.interactions||new xe,n.overlays_=o.overlays,n.overlayIdIndex_={},n.renderer_=null,n.handleResize_,n.postRenderFunctions_=[],n.tileQueue_=new Ze(n.getTilePriority.bind(n),n.handleTileChange_.bind(n)),n.addEventListener(bt(Ae),n.handleLayerGroupChanged_),n.addEventListener(bt(ze),n.handleViewChanged_),n.addEventListener(bt(Fe),n.handleSizeChanged_),n.addEventListener(bt(Le),n.handleTargetChanged_),n.setProperties(o.values),n.controls.forEach(function(t){t.setMap(this)}.bind(n)),n.controls.addEventListener(_e,function(t){t.element.setMap(this)}.bind(n)),n.controls.addEventListener(ge,function(t){t.element.setMap(null)}.bind(n)),n.interactions.forEach(function(t){t.setMap(this)}.bind(n)),n.interactions.addEventListener(_e,function(t){t.element.setMap(this)}.bind(n)),n.interactions.addEventListener(ge,function(t){t.element.setMap(null)}.bind(n)),n.overlays_.forEach(n.addOverlayInternal_.bind(n)),n.overlays_.addEventListener(_e,function(t){this.addOverlayInternal_(t.element)}.bind(n)),n.overlays_.addEventListener(ge,function(t){var e=t.element.getId();void 0!==e&&delete this.overlayIdIndex_[e.toString()],t.element.setMap(null)}.bind(n)),n}return Oo(e,t),e.prototype.createRenderer=function(){throw new Error("Use a map type that has a createRenderer method")},e.prototype.addControl=function(t){this.getControls().push(t)},e.prototype.addInteraction=function(t){this.getInteractions().push(t)},e.prototype.addLayer=function(t){this.getLayerGroup().getLayers().push(t)},e.prototype.addOverlay=function(t){this.getOverlays().push(t)},e.prototype.addOverlayInternal_=function(t){var e=t.getId();void 0!==e&&(this.overlayIdIndex_[e.toString()]=t),t.setMap(this)},e.prototype.disposeInternal=function(){this.setTarget(null),t.prototype.disposeInternal.call(this)},e.prototype.forEachFeatureAtPixel=function(t,e,n){if(this.frameState_){var o=this.getCoordinateFromPixelInternal(t),r=void 0!==(n=void 0!==n?n:{}).hitTolerance?n.hitTolerance:0,a=void 0!==n.layerFilter?n.layerFilter:i,s=!1!==n.checkWrapped;return this.renderer_.forEachFeatureAtCoordinate(o,this.frameState_,r,s,e,null,a,null)}},e.prototype.getFeaturesAtPixel=function(t,e){var n=[];return this.forEachFeatureAtPixel(t,(function(t){n.push(t)}),e),n},e.prototype.forEachLayerAtPixel=function(t,e,n){if(this.frameState_){var o=n||{},r=void 0!==o.hitTolerance?o.hitTolerance:0,a=o.layerFilter||i;return this.renderer_.forEachLayerAtPixel(t,this.frameState_,r,e,a)}},e.prototype.hasFeatureAtPixel=function(t,e){if(!this.frameState_)return!1;var n=this.getCoordinateFromPixelInternal(t),o=void 0!==(e=void 0!==e?e:{}).layerFilter?e.layerFilter:i,r=void 0!==e.hitTolerance?e.hitTolerance:0,a=!1!==e.checkWrapped;return this.renderer_.hasFeatureAtCoordinate(n,this.frameState_,r,a,o,null)},e.prototype.getEventCoordinate=function(t){return this.getCoordinateFromPixel(this.getEventPixel(t))},e.prototype.getEventCoordinateInternal=function(t){return this.getCoordinateFromPixelInternal(this.getEventPixel(t))},e.prototype.getEventPixel=function(t){var e=this.viewport_.getBoundingClientRect(),n="changedTouches"in t?t.changedTouches[0]:t;return[n.clientX-e.left,n.clientY-e.top]},e.prototype.getTarget=function(){return this.get(Le)},e.prototype.getTargetElement=function(){var t=this.getTarget();return void 0!==t?"string"==typeof t?document.getElementById(t):t:null},e.prototype.getCoordinateFromPixel=function(t){return Sn(this.getCoordinateFromPixelInternal(t),this.getView().getProjection())},e.prototype.getCoordinateFromPixelInternal=function(t){var e=this.frameState_;return e?d(e.pixelToCoordinateTransform,t.slice()):null},e.prototype.getControls=function(){return this.controls},e.prototype.getOverlays=function(){return this.overlays_},e.prototype.getOverlayById=function(t){var e=this.overlayIdIndex_[t.toString()];return void 0!==e?e:null},e.prototype.getInteractions=function(){return this.interactions},e.prototype.getLayerGroup=function(){return this.get(Ae)},e.prototype.getLayers=function(){return this.getLayerGroup().getLayers()},e.prototype.getLoading=function(){for(var t=this.getLayerGroup().getLayerStatesArray(),e=0,n=t.length;e<n;++e){var o=t[e].layer.getSource();if(o&&o.loading)return!0}return!1},e.prototype.getPixelFromCoordinate=function(t){var e=Mn(t,this.getView().getProjection());return this.getPixelFromCoordinateInternal(e)},e.prototype.getPixelFromCoordinateInternal=function(t){var e=this.frameState_;return e?d(e.coordinateToPixelTransform,t.slice(0,2)):null},e.prototype.getRenderer=function(){return this.renderer_},e.prototype.getSize=function(){return this.get(Fe)},e.prototype.getView=function(){return this.get(ze)},e.prototype.getViewport=function(){return this.viewport_},e.prototype.getOverlayContainer=function(){return this.overlayContainer_},e.prototype.getOverlayContainerStopEvent=function(){return this.overlayContainerStopEvent_},e.prototype.getOwnerDocument=function(){return this.getTargetElement()?this.getTargetElement().ownerDocument:document},e.prototype.getTilePriority=function(t,e,n,o){return function(t,e,n,o,i){if(!t||!(n in t.wantedTiles))return De;if(!t.wantedTiles[n][e.getKey()])return De;var r=t.viewState.center,a=o[0]-r[0],s=o[1]-r[1];return 65536*Math.log(i)+Math.sqrt(a*a+s*s)/i}(this.frameState_,t,e,n,o)},e.prototype.handleBrowserEvent=function(t,e){var n=e||t.type,o=new Oe(n,this,t);this.handleMapBrowserEvent(o)},e.prototype.handleMapBrowserEvent=function(t){if(this.frameState_){var e=t.originalEvent,n=e.type;if(n===Se||n===dt||n===ct){var o=this.getOwnerDocument(),i=this.viewport_.getRootNode?this.viewport_.getRootNode():o,r="host"in i?i.elementFromPoint(e.clientX,e.clientY):e.target;if(this.overlayContainerStopEvent_.contains(r)||!(i===o?o.documentElement:i).contains(r))return}if(t.frameState=this.frameState_,!1!==this.dispatchEvent(t))for(var a=this.getInteractions().getArray().slice(),s=a.length-1;s>=0;s--){var l=a[s];if(l.getMap()===this&&l.getActive()&&this.getTargetElement()&&(!l.handleEvent(t)||t.propagationStopped))break}}},e.prototype.handlePostRender=function(){var t=this.frameState_,e=this.tileQueue_;if(!e.isEmpty()){var n=this.maxTilesLoading_,o=n;if(t){var i=t.viewHints;if(i[0]||i[1]){var r=!re&&Date.now()-t.time>8;n=r?0:8,o=r?0:2}}e.getTilesLoading()<n&&(e.reprioritize(),e.loadMoreTiles(n,o))}!t||!this.hasListener(kt)||t.animate||this.tileQueue_.getTilesLoading()||this.getLoading()||this.renderer_.dispatchRenderEvent(kt,t);for(var a=this.postRenderFunctions_,s=0,l=a.length;s<l;++s)a[s](this,t);a.length=0},e.prototype.handleSizeChanged_=function(){this.getView()&&!this.getView().getAnimating()&&this.getView().resolveConstraints(0),this.render()},e.prototype.handleTargetChanged_=function(){var t;if(this.getTarget()&&(t=this.getTargetElement()),this.mapBrowserEventHandler_){for(var e=0,n=this.keyHandlerKeys_.length;e<n;++e)vt(this.keyHandlerKeys_[e]);this.keyHandlerKeys_=null,this.viewport_.removeEventListener(lt,this.boundHandleBrowserEvent_),this.viewport_.removeEventListener(dt,this.boundHandleBrowserEvent_),void 0!==this.handleResize_&&(removeEventListener(pt,this.handleResize_,!1),this.handleResize_=void 0),this.mapBrowserEventHandler_.dispose(),this.mapBrowserEventHandler_=null,ue(this.viewport_)}if(t){for(var o in t.appendChild(this.viewport_),this.renderer_||(this.renderer_=this.createRenderer()),this.mapBrowserEventHandler_=new Ie(this,this.moveTolerance_),Re)this.mapBrowserEventHandler_.addEventListener(Re[o],this.handleMapBrowserEvent.bind(this));this.viewport_.addEventListener(lt,this.boundHandleBrowserEvent_,!1),this.viewport_.addEventListener(dt,this.boundHandleBrowserEvent_,!!ae&&{passive:!1});var i=this.keyboardEventTarget_?this.keyboardEventTarget_:t;this.keyHandlerKeys_=[_t(i,ct,this.handleBrowserEvent,this),_t(i,ht,this.handleBrowserEvent,this)],this.handleResize_||(this.handleResize_=this.updateSize.bind(this),window.addEventListener(pt,this.handleResize_,!1))}else this.renderer_&&(clearTimeout(this.postRenderTimeoutHandle_),this.postRenderTimeoutHandle_=void 0,this.postRenderFunctions_.length=0,this.renderer_.dispose(),this.renderer_=null),this.animationDelayKey_&&(cancelAnimationFrame(this.animationDelayKey_),this.animationDelayKey_=void 0);this.updateSize()},e.prototype.handleTileChange_=function(){this.render()},e.prototype.handleViewPropertyChanged_=function(){this.render()},e.prototype.handleViewChanged_=function(){this.viewPropertyListenerKey_&&(vt(this.viewPropertyListenerKey_),this.viewPropertyListenerKey_=null),this.viewChangeListenerKey_&&(vt(this.viewChangeListenerKey_),this.viewChangeListenerKey_=null);var t=this.getView();t&&(this.updateViewportSize_(),this.viewPropertyListenerKey_=_t(t,et,this.handleViewPropertyChanged_,this),this.viewChangeListenerKey_=_t(t,st,this.handleViewPropertyChanged_,this),t.resolveConstraints(0)),this.render()},e.prototype.handleLayerGroupChanged_=function(){this.layerGroupPropertyListenerKeys_&&(this.layerGroupPropertyListenerKeys_.forEach(vt),this.layerGroupPropertyListenerKeys_=null);var t=this.getLayerGroup();t&&(this.layerGroupPropertyListenerKeys_=[_t(t,et,this.render,this),_t(t,st,this.render,this)]),this.render()},e.prototype.isRendered=function(){return!!this.frameState_},e.prototype.renderSync=function(){this.animationDelayKey_&&cancelAnimationFrame(this.animationDelayKey_),this.animationDelay_()},e.prototype.redrawText=function(){for(var t=this.getLayerGroup().getLayerStatesArray(),e=0,n=t.length;e<n;++e){var o=t[e].layer;o.hasRenderer()&&o.getRenderer().handleFontsChanged()}},e.prototype.render=function(){this.renderer_&&void 0===this.animationDelayKey_&&(this.animationDelayKey_=requestAnimationFrame(this.animationDelay_))},e.prototype.removeControl=function(t){return this.getControls().remove(t)},e.prototype.removeInteraction=function(t){return this.getInteractions().remove(t)},e.prototype.removeLayer=function(t){return this.getLayerGroup().getLayers().remove(t)},e.prototype.removeOverlay=function(t){return this.getOverlays().remove(t)},e.prototype.renderFrame_=function(t){var e,n,o=this,i=this.getSize(),r=this.getView(),a=this.frameState_,s=null;if(void 0!==i&&function(t){return t[0]>0&&t[1]>0}(i)&&r&&r.isDef()){var l=r.getHints(this.frameState_?this.frameState_.viewHints:void 0),u=r.getState();s={animate:!1,coordinateToPixelTransform:this.coordinateToPixelTransform_,declutterTree:null,extent:z(u.center,u.resolution,u.rotation,i),index:this.frameIndex_++,layerIndex:0,layerStatesArray:this.getLayerGroup().getLayerStatesArray(),pixelRatio:this.pixelRatio_,pixelToCoordinateTransform:this.pixelToCoordinateTransform_,postRenderFunctions:[],size:i,tileQueue:this.tileQueue_,time:t,usedTiles:{},viewState:u,viewHints:l,wantedTiles:{}}}this.frameState_=s,this.renderer_.renderFrame(s),s&&(s.animate&&this.render(),Array.prototype.push.apply(this.postRenderFunctions_,s.postRenderFunctions),a&&(!this.previousExtent_||!X(this.previousExtent_)&&!T(s.extent,this.previousExtent_))&&(this.dispatchEvent(new Pe("movestart",this,a)),this.previousExtent_=P(this.previousExtent_)),this.previousExtent_&&!s.viewHints[0]&&!s.viewHints[1]&&!T(s.extent,this.previousExtent_)&&(this.dispatchEvent(new Pe("moveend",this,s)),e=s.extent,(n=this.previousExtent_)?(n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3]):e.slice())),this.dispatchEvent(new Pe(je,this,s)),this.postRenderTimeoutHandle_||(this.postRenderTimeoutHandle_=setTimeout((function(){o.postRenderTimeoutHandle_=void 0,o.handlePostRender()}),0))},e.prototype.setLayerGroup=function(t){this.set(Ae,t)},e.prototype.setSize=function(t){this.set(Fe,t)},e.prototype.setTarget=function(t){this.set(Le,t)},e.prototype.setView=function(t){this.set(ze,t)},e.prototype.updateSize=function(){var t=this.getTargetElement();if(t){var e=getComputedStyle(t);this.setSize([t.offsetWidth-parseFloat(e.borderLeftWidth)-parseFloat(e.paddingLeft)-parseFloat(e.paddingRight)-parseFloat(e.borderRightWidth),t.offsetHeight-parseFloat(e.borderTopWidth)-parseFloat(e.paddingTop)-parseFloat(e.paddingBottom)-parseFloat(e.borderBottomWidth)])}else this.setSize(void 0);this.updateViewportSize_()},e.prototype.updateViewportSize_=function(){var t=this.getView();if(t){var e=void 0,n=getComputedStyle(this.viewport_);n.width&&n.height&&(e=[parseInt(n.width,10),parseInt(n.height,10)]),t.setViewportSize(e)}},e}(Pt);var So=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Mo=function(t){function e(e){var n=t.call(this)||this,o=e.element;return!o||e.target||o.style.pointerEvents||(o.style.pointerEvents="auto"),n.element=o||null,n.target_=null,n.map_=null,n.listenerKeys=[],e.render&&(n.render=e.render),e.target&&n.setTarget(e.target),n}return So(e,t),e.prototype.disposeInternal=function(){ue(this.element),t.prototype.disposeInternal.call(this)},e.prototype.getMap=function(){return this.map_},e.prototype.setMap=function(t){this.map_&&ue(this.element);for(var e=0,n=this.listenerKeys.length;e<n;++e)vt(this.listenerKeys[e]);this.listenerKeys.length=0,this.map_=t,this.map_&&((this.target_?this.target_:t.getOverlayContainerStopEvent()).appendChild(this.element),this.render!==a&&this.listenerKeys.push(_t(t,je,this.render,this)),t.render())},e.prototype.render=function(t){},e.prototype.setTarget=function(t){this.target_="string"==typeof t?document.getElementById(t):t},e}(Pt);var Io=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const jo=function(t){function e(e){var n=this,o=e||{};(n=t.call(this,{element:document.createElement("div"),render:o.render,target:o.target})||this).ulElement_=document.createElement("ul"),n.collapsed_=void 0===o.collapsed||o.collapsed,n.userCollapsed_=n.collapsed_,n.overrideCollapsible_=void 0!==o.collapsible,n.collapsible_=void 0===o.collapsible||o.collapsible,n.collapsible_||(n.collapsed_=!1);var i=void 0!==o.className?o.className:"ol-attribution",r=void 0!==o.tipLabel?o.tipLabel:"Attributions",a=void 0!==o.expandClassName?o.expandClassName:i+"-expand",s=void 0!==o.collapseLabel?o.collapseLabel:"»",l=void 0!==o.collapseClassName?o.collapseClassName:i+"-collpase";"string"==typeof s?(n.collapseLabel_=document.createElement("span"),n.collapseLabel_.textContent=s,n.collapseLabel_.className=l):n.collapseLabel_=s;var u=void 0!==o.label?o.label:"i";"string"==typeof u?(n.label_=document.createElement("span"),n.label_.textContent=u,n.label_.className=a):n.label_=u;var c=n.collapsible_&&!n.collapsed_?n.collapseLabel_:n.label_,h=document.createElement("button");h.setAttribute("type","button"),h.title=r,h.appendChild(c),h.addEventListener(ut,n.handleClick_.bind(n),!1);var p=i+" ol-unselectable "+$t+(n.collapsed_&&n.collapsible_?" ol-collapsed":"")+(n.collapsible_?"":" ol-uncollapsible"),f=n.element;return f.className=p,f.appendChild(n.ulElement_),f.appendChild(h),n.renderedAttributions_=[],n.renderedVisible_=!0,n}return Io(e,t),e.prototype.collectSourceAttributions_=function(t){for(var e={},n=[],o=!0,i=t.layerStatesArray,r=0,a=i.length;r<a;++r){var s=i[r];if(Nt(s,t.viewState)){var l=s.layer.getSource();if(l){var u=l.getAttributions();if(u){var c=u(t);if(c)if(o=o&&!1!==l.getAttributionsCollapsible(),Array.isArray(c))for(var h=0,p=c.length;h<p;++h)c[h]in e||(n.push(c[h]),e[c[h]]=!0);else c in e||(n.push(c),e[c]=!0)}}}}return this.overrideCollapsible_||this.setCollapsible(o),n},e.prototype.updateElement_=function(t){if(t){var e=this.collectSourceAttributions_(t),n=e.length>0;if(this.renderedVisible_!=n&&(this.element.style.display=n?"":"none",this.renderedVisible_=n),!o(e,this.renderedAttributions_)){!function(t){for(;t.lastChild;)t.removeChild(t.lastChild)}(this.ulElement_);for(var i=0,r=e.length;i<r;++i){var a=document.createElement("li");a.innerHTML=e[i],this.ulElement_.appendChild(a)}this.renderedAttributions_=e}}else this.renderedVisible_&&(this.element.style.display="none",this.renderedVisible_=!1)},e.prototype.handleClick_=function(t){t.preventDefault(),this.handleToggle_(),this.userCollapsed_=this.collapsed_},e.prototype.handleToggle_=function(){this.element.classList.toggle("ol-collapsed"),this.collapsed_?le(this.collapseLabel_,this.label_):le(this.label_,this.collapseLabel_),this.collapsed_=!this.collapsed_},e.prototype.getCollapsible=function(){return this.collapsible_},e.prototype.setCollapsible=function(t){this.collapsible_!==t&&(this.collapsible_=t,this.element.classList.toggle("ol-uncollapsible"),this.userCollapsed_&&this.handleToggle_())},e.prototype.setCollapsed=function(t){this.userCollapsed_=t,this.collapsible_&&this.collapsed_!==t&&this.handleToggle_()},e.prototype.getCollapsed=function(){return this.collapsed_},e.prototype.render=function(t){this.updateElement_(t.frameState)},e}(Mo);var Ao=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Fo=function(t){function e(e){var n=this,o=e||{};n=t.call(this,{element:document.createElement("div"),render:o.render,target:o.target})||this;var i=void 0!==o.className?o.className:"ol-rotate",r=void 0!==o.label?o.label:"⇧",a=void 0!==o.compassClassName?o.compassClassName:"ol-compass";n.label_=null,"string"==typeof r?(n.label_=document.createElement("span"),n.label_.className=a,n.label_.textContent=r):(n.label_=r,n.label_.classList.add(a));var s=o.tipLabel?o.tipLabel:"Reset rotation",l=document.createElement("button");l.className=i+"-reset",l.setAttribute("type","button"),l.title=s,l.appendChild(n.label_),l.addEventListener(ut,n.handleClick_.bind(n),!1);var u=i+" ol-unselectable "+$t,c=n.element;return c.className=u,c.appendChild(l),n.callResetNorth_=o.resetNorth?o.resetNorth:void 0,n.duration_=void 0!==o.duration?o.duration:250,n.autoHide_=void 0===o.autoHide||o.autoHide,n.rotation_=void 0,n.autoHide_&&n.element.classList.add(Qt),n}return Ao(e,t),e.prototype.handleClick_=function(t){t.preventDefault(),void 0!==this.callResetNorth_?this.callResetNorth_():this.resetNorth_()},e.prototype.resetNorth_=function(){var t=this.getMap().getView();if(t){var e=t.getRotation();void 0!==e&&(this.duration_>0&&e%(2*Math.PI)!=0?t.animate({rotation:0,duration:this.duration_,easing:Zn}):t.setRotation(0))}},e.prototype.render=function(t){var e=t.frameState;if(e){var n=e.viewState.rotation;if(n!=this.rotation_){var o="rotate("+n+"rad)";if(this.autoHide_){var i=this.element.classList.contains(Qt);i||0!==n?i&&0!==n&&this.element.classList.remove(Qt):this.element.classList.add(Qt)}this.label_.style.transform=o}this.rotation_=n}},e}(Mo);var Lo=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const zo=function(t){function e(e){var n=this,o=e||{};n=t.call(this,{element:document.createElement("div"),target:o.target})||this;var i=void 0!==o.className?o.className:"ol-zoom",r=void 0!==o.delta?o.delta:1,a=void 0!==o.zoomInClassName?o.zoomInClassName:i+"-in",s=void 0!==o.zoomOutClassName?o.zoomOutClassName:i+"-out",l=void 0!==o.zoomInLabel?o.zoomInLabel:"+",u=void 0!==o.zoomOutLabel?o.zoomOutLabel:"−",c=void 0!==o.zoomInTipLabel?o.zoomInTipLabel:"Zoom in",h=void 0!==o.zoomOutTipLabel?o.zoomOutTipLabel:"Zoom out",p=document.createElement("button");p.className=a,p.setAttribute("type","button"),p.title=c,p.appendChild("string"==typeof l?document.createTextNode(l):l),p.addEventListener(ut,n.handleClick_.bind(n,r),!1);var f=document.createElement("button");f.className=s,f.setAttribute("type","button"),f.title=h,f.appendChild("string"==typeof u?document.createTextNode(u):u),f.addEventListener(ut,n.handleClick_.bind(n,-r),!1);var d=i+" ol-unselectable "+$t,_=n.element;return _.className=d,_.appendChild(p),_.appendChild(f),n.duration_=void 0!==o.duration?o.duration:250,n}return Lo(e,t),e.prototype.handleClick_=function(t,e){e.preventDefault(),this.zoomByDelta_(t)},e.prototype.zoomByDelta_=function(t){var e=this.getMap().getView();if(e){var n=e.getZoom();if(void 0!==n){var o=e.getConstrainedZoom(n+t);this.duration_>0?(e.getAnimating()&&e.cancelAnimations(),e.animate({zoom:o,duration:this.duration_,easing:Zn})):e.setZoom(o)}}},e}(Mo),Do="active";var ko=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();function Ko(t,e,n,o){var i=t.getZoom();if(void 0!==i){var r=t.getConstrainedZoom(i+e),a=t.getResolutionForZoom(r);t.getAnimating()&&t.cancelAnimations(),t.animate({resolution:a,anchor:n,duration:void 0!==o?o:250,easing:Zn})}}const Zo=function(t){function e(e){var n=t.call(this)||this;return e&&e.handleEvent&&(n.handleEvent=e.handleEvent),n.map_=null,n.setActive(!0),n}return ko(e,t),e.prototype.getActive=function(){return this.get(Do)},e.prototype.getMap=function(){return this.map_},e.prototype.handleEvent=function(t){return!0},e.prototype.setActive=function(t){this.set(Do,t)},e.prototype.setMap=function(t){this.map_=t},e}(Pt);var Go=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const No=function(t){function e(e){var n=t.call(this)||this,o=e||{};return n.delta_=o.delta?o.delta:1,n.duration_=void 0!==o.duration?o.duration:250,n}return Go(e,t),e.prototype.handleEvent=function(t){var e=!1;if(t.type==Re.DBLCLICK){var n=t.originalEvent,o=t.map,i=t.coordinate,r=n.shiftKey?-this.delta_:this.delta_;Ko(o.getView(),r,i,this.duration_),n.preventDefault(),e=!0}return!e},e}(Zo);var Xo=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();function Uo(t){for(var e=t.length,n=0,o=0,i=0;i<e;i++)n+=t[i].clientX,o+=t[i].clientY;return[n/e,o/e]}const Vo=function(t){function e(e){var n=this,o=e||{};return n=t.call(this,o)||this,o.handleDownEvent&&(n.handleDownEvent=o.handleDownEvent),o.handleDragEvent&&(n.handleDragEvent=o.handleDragEvent),o.handleMoveEvent&&(n.handleMoveEvent=o.handleMoveEvent),o.handleUpEvent&&(n.handleUpEvent=o.handleUpEvent),o.stopDown&&(n.stopDown=o.stopDown),n.handlingDownUpSequence=!1,n.trackedPointers_={},n.targetPointers=[],n}return Xo(e,t),e.prototype.getPointerCount=function(){return this.targetPointers.length},e.prototype.handleDownEvent=function(t){return!1},e.prototype.handleDragEvent=function(t){},e.prototype.handleEvent=function(t){if(!t.originalEvent)return!0;var e=!1;if(this.updateTrackedPointers_(t),this.handlingDownUpSequence){if(t.type==Re.POINTERDRAG)this.handleDragEvent(t),t.originalEvent.preventDefault();else if(t.type==Re.POINTERUP){var n=this.handleUpEvent(t);this.handlingDownUpSequence=n&&this.targetPointers.length>0}}else if(t.type==Re.POINTERDOWN){var o=this.handleDownEvent(t);this.handlingDownUpSequence=o,e=this.stopDown(o)}else t.type==Re.POINTERMOVE&&this.handleMoveEvent(t);return!e},e.prototype.handleMoveEvent=function(t){},e.prototype.handleUpEvent=function(t){return!1},e.prototype.stopDown=function(t){return t},e.prototype.updateTrackedPointers_=function(t){if(function(t){var e=t.type;return e===Re.POINTERDOWN||e===Re.POINTERDRAG||e===Re.POINTERUP}(t)){var e=t.originalEvent,n=e.pointerId.toString();t.type==Re.POINTERUP?delete this.trackedPointers_[n]:(t.type==Re.POINTERDOWN||n in this.trackedPointers_)&&(this.trackedPointers_[n]=e),this.targetPointers=it(this.trackedPointers_)}},e}(Zo);function Wo(t){var e=arguments;return function(t){for(var n=!0,o=0,i=e.length;o<i&&(n=n&&e[o](t));++o);return n}}var Yo=function(t){var e=t.originalEvent;return e.altKey&&!(e.metaKey||e.ctrlKey)&&e.shiftKey},qo=function(t){return!t.map.getTargetElement().hasAttribute("tabindex")||function(t){return t.target.getTargetElement().contains(document.activeElement)}(t)},Ho=i,Bo=function(t){var e=t.originalEvent;return 0==e.button&&!(ee&&ne&&e.ctrlKey)},Qo=function(t){var e=t.originalEvent;return!e.altKey&&!(e.metaKey||e.ctrlKey)&&!e.shiftKey},$o=function(t){var e=t.originalEvent;return!e.altKey&&!(e.metaKey||e.ctrlKey)&&e.shiftKey},Jo=function(t){var e=t.originalEvent.target.tagName;return"INPUT"!==e&&"SELECT"!==e&&"TEXTAREA"!==e},ti=function(t){var e=t.originalEvent;return f(void 0!==e,56),"mouse"==e.pointerType},ei=function(t){var e=t.originalEvent;return f(void 0!==e,56),e.isPrimary&&0===e.button},ni=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const oi=function(t){function e(e){var n=t.call(this,{stopDown:r})||this,o=e||{};n.kinetic_=o.kinetic,n.lastCentroid=null,n.lastPointersCount_,n.panning_=!1;var i=o.condition?o.condition:Wo(Qo,ei);return n.condition_=o.onFocusOnly?Wo(qo,i):i,n.noKinetic_=!1,n}return ni(e,t),e.prototype.handleDragEvent=function(t){this.panning_||(this.panning_=!0,this.getMap().getView().beginInteraction());var e,n,o=this.targetPointers,i=Uo(o);if(o.length==this.lastPointersCount_){if(this.kinetic_&&this.kinetic_.update(i[0],i[1]),this.lastCentroid){var r=[this.lastCentroid[0]-i[0],i[1]-this.lastCentroid[1]],a=t.map.getView();e=r,n=a.getResolution(),e[0]*=n,e[1]*=n,Vt(r,a.getRotation()),a.adjustCenterInternal(r)}}else this.kinetic_&&this.kinetic_.begin();this.lastCentroid=i,this.lastPointersCount_=o.length,t.originalEvent.preventDefault()},e.prototype.handleUpEvent=function(t){var e=t.map,n=e.getView();if(0===this.targetPointers.length){if(!this.noKinetic_&&this.kinetic_&&this.kinetic_.end()){var o=this.kinetic_.getDistance(),i=this.kinetic_.getAngle(),r=n.getCenterInternal(),a=e.getPixelFromCoordinateInternal(r),s=e.getCoordinateFromPixelInternal([a[0]-o*Math.cos(i),a[1]-o*Math.sin(i)]);n.animateInternal({center:n.getConstrainedCenter(s),duration:500,easing:Zn})}return this.panning_&&(this.panning_=!1,n.endInteraction()),!1}return this.kinetic_&&this.kinetic_.begin(),this.lastCentroid=null,!0},e.prototype.handleDownEvent=function(t){if(this.targetPointers.length>0&&this.condition_(t)){var e=t.map.getView();return this.lastCentroid=null,e.getAnimating()&&e.cancelAnimations(),this.kinetic_&&this.kinetic_.begin(),this.noKinetic_=this.targetPointers.length>1,!0}return!1},e}(Vo);var ii=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const ri=function(t){function e(e){var n=this,o=e||{};return(n=t.call(this,{stopDown:r})||this).condition_=o.condition?o.condition:Yo,n.lastAngle_=void 0,n.duration_=void 0!==o.duration?o.duration:250,n}return ii(e,t),e.prototype.handleDragEvent=function(t){if(ti(t)){var e=t.map,n=e.getView();if(n.getConstraints().rotation!==Dn){var o=e.getSize(),i=t.pixel,r=Math.atan2(o[1]/2-i[1],i[0]-o[0]/2);if(void 0!==this.lastAngle_){var a=r-this.lastAngle_;n.adjustRotationInternal(-a)}this.lastAngle_=r}}},e.prototype.handleUpEvent=function(t){return!ti(t)||(t.map.getView().endInteraction(this.duration_),!1)},e.prototype.handleDownEvent=function(t){return!(!ti(t)||!Bo(t)||!this.condition_(t)||(t.map.getView().beginInteraction(),this.lastAngle_=void 0,0))},e}(Vo);var ai=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const si=function(t){function e(e){var n=t.call(this)||this;return n.geometry_=null,n.element_=document.createElement("div"),n.element_.style.position="absolute",n.element_.style.pointerEvents="auto",n.element_.className="ol-box "+e,n.map_=null,n.startPixel_=null,n.endPixel_=null,n}return ai(e,t),e.prototype.disposeInternal=function(){this.setMap(null)},e.prototype.render_=function(){var t=this.startPixel_,e=this.endPixel_,n="px",o=this.element_.style;o.left=Math.min(t[0],e[0])+n,o.top=Math.min(t[1],e[1])+n,o.width=Math.abs(e[0]-t[0])+n,o.height=Math.abs(e[1]-t[1])+n},e.prototype.setMap=function(t){if(this.map_){this.map_.getOverlayContainer().removeChild(this.element_);var e=this.element_.style;e.left="inherit",e.top="inherit",e.width="inherit",e.height="inherit"}this.map_=t,this.map_&&this.map_.getOverlayContainer().appendChild(this.element_)},e.prototype.setPixels=function(t,e){this.startPixel_=t,this.endPixel_=e,this.createOrUpdateGeometry(),this.render_()},e.prototype.createOrUpdateGeometry=function(){var t=this.startPixel_,e=this.endPixel_,n=[t,[t[0],e[1]],e,[e[0],t[1]]].map(this.map_.getCoordinateFromPixelInternal,this.map_);n[4]=n[0].slice(),this.geometry_?this.geometry_.setCoordinates([n]):this.geometry_=new mo([n])},e.prototype.getGeometry=function(){return this.geometry_},e}(t);var li=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),ui=function(t){function e(e,n,o){var i=t.call(this,e)||this;return i.coordinate=n,i.mapBrowserEvent=o,i}return li(e,t),e}(tt);const ci=function(t){function e(e){var n=t.call(this)||this,o=e||{};return n.box_=new si(o.className||"ol-dragbox"),n.minArea_=void 0!==o.minArea?o.minArea:64,o.onBoxEnd&&(n.onBoxEnd=o.onBoxEnd),n.startPixel_=null,n.condition_=o.condition?o.condition:Bo,n.boxEndCondition_=o.boxEndCondition?o.boxEndCondition:n.defaultBoxEndCondition,n}return li(e,t),e.prototype.defaultBoxEndCondition=function(t,e,n){var o=n[0]-e[0],i=n[1]-e[1];return o*o+i*i>=this.minArea_},e.prototype.getGeometry=function(){return this.box_.getGeometry()},e.prototype.handleDragEvent=function(t){this.box_.setPixels(this.startPixel_,t.pixel),this.dispatchEvent(new ui("boxdrag",t.coordinate,t))},e.prototype.handleUpEvent=function(t){this.box_.setMap(null);var e=this.boxEndCondition_(t,this.startPixel_,t.pixel);return e&&this.onBoxEnd(t),this.dispatchEvent(new ui(e?"boxend":"boxcancel",t.coordinate,t)),!1},e.prototype.handleDownEvent=function(t){return!!this.condition_(t)&&(this.startPixel_=t.pixel,this.box_.setMap(t.map),this.box_.setPixels(this.startPixel_,this.startPixel_),this.dispatchEvent(new ui("boxstart",t.coordinate,t)),!0)},e.prototype.onBoxEnd=function(t){},e}(Vo);var hi=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const pi=function(t){function e(e){var n=this,o=e||{},i=o.condition?o.condition:$o;return(n=t.call(this,{condition:i,className:o.className||"ol-dragzoom",minArea:o.minArea})||this).duration_=void 0!==o.duration?o.duration:200,n.out_=void 0!==o.out&&o.out,n}return hi(e,t),e.prototype.onBoxEnd=function(t){var e=this.getMap(),n=e.getView(),o=e.getSize(),i=this.getGeometry().getExtent();if(this.out_){var r=n.calculateExtentInternal(o),a=function(t,e){return function(t,e){for(var n=0,o=e.length;n<o;++n)O(t,e[n]);return t}(P(void 0),t)}([e.getPixelFromCoordinateInternal(j(i)),e.getPixelFromCoordinateInternal(Z(i))]);!function(t,e){var n=(t[2]-t[0])/2*(e-1),o=(t[3]-t[1])/2*(e-1);t[0]-=n,t[2]+=n,t[1]-=o,t[3]+=o}(r,1/n.getResolutionForExtentInternal(a,o)),i=r}var s=n.getConstrainedResolution(n.getResolutionForExtentInternal(i,o)),l=n.getConstrainedCenter(F(i),s);n.animateInternal({resolution:s,center:l,duration:this.duration_,easing:Zn})},e}(ci);var fi=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const di=function(t){function e(e){var n=t.call(this)||this,o=e||{};return n.defaultCondition_=function(t){return Qo(t)&&Jo(t)},n.condition_=void 0!==o.condition?o.condition:n.defaultCondition_,n.duration_=void 0!==o.duration?o.duration:100,n.pixelDelta_=void 0!==o.pixelDelta?o.pixelDelta:128,n}return fi(e,t),e.prototype.handleEvent=function(t){var e=!1;if(t.type==ct){var n=t.originalEvent,o=n.keyCode;if(this.condition_(t)&&(40==o||37==o||39==o||38==o)){var i=t.map.getView(),r=i.getResolution()*this.pixelDelta_,a=0,s=0;40==o?s=-r:37==o?a=-r:39==o?a=r:s=r;var l=[a,s];Vt(l,i.getRotation()),function(t,e,n){var o=t.getCenterInternal();if(o){var i=[o[0]+e[0],o[1]+e[1]];t.animateInternal({duration:void 0!==n?n:250,easing:Nn,center:t.getConstrainedCenter(i)})}}(i,l,this.duration_),n.preventDefault(),e=!0}}return!e},e}(Zo);var _i=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const gi=function(t){function e(e){var n=t.call(this)||this,o=e||{};return n.condition_=o.condition?o.condition:Jo,n.delta_=o.delta?o.delta:1,n.duration_=void 0!==o.duration?o.duration:100,n}return _i(e,t),e.prototype.handleEvent=function(t){var e=!1;if(t.type==ct||t.type==ht){var n=t.originalEvent,o=n.charCode;if(this.condition_(t)&&(o=="+".charCodeAt(0)||o=="-".charCodeAt(0))){var i=t.map,r=o=="+".charCodeAt(0)?this.delta_:-this.delta_;Ko(i.getView(),r,void 0,this.duration_),n.preventDefault(),e=!0}}return!e},e}(Zo),vi=function(){function t(t,e,n){this.decay_=t,this.minVelocity_=e,this.delay_=n,this.points_=[],this.angle_=0,this.initialVelocity_=0}return t.prototype.begin=function(){this.points_.length=0,this.angle_=0,this.initialVelocity_=0},t.prototype.update=function(t,e){this.points_.push(t,e,Date.now())},t.prototype.end=function(){if(this.points_.length<6)return!1;var t=Date.now()-this.delay_,e=this.points_.length-3;if(this.points_[e+2]<t)return!1;for(var n=e-3;n>0&&this.points_[n+2]>t;)n-=3;var o=this.points_[e+2]-this.points_[n+2];if(o<1e3/60)return!1;var i=this.points_[e]-this.points_[n],r=this.points_[e+1]-this.points_[n+1];return this.angle_=Math.atan2(r,i),this.initialVelocity_=Math.sqrt(i*i+r*r)/o,this.initialVelocity_>this.minVelocity_},t.prototype.getDistance=function(){return(this.minVelocity_-this.initialVelocity_)/this.decay_},t.prototype.getAngle=function(){return this.angle_},t}();var yi=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),mi="trackpad";const xi=function(t){function e(e){var n=this,o=e||{};(n=t.call(this,o)||this).totalDelta_=0,n.lastDelta_=0,n.maxDelta_=void 0!==o.maxDelta?o.maxDelta:1,n.duration_=void 0!==o.duration?o.duration:250,n.timeout_=void 0!==o.timeout?o.timeout:80,n.useAnchor_=void 0===o.useAnchor||o.useAnchor,n.constrainResolution_=void 0!==o.constrainResolution&&o.constrainResolution;var i=o.condition?o.condition:Ho;return n.condition_=o.onFocusOnly?Wo(qo,i):i,n.lastAnchor_=null,n.startTime_=void 0,n.timeoutId_,n.mode_=void 0,n.trackpadEventGap_=400,n.trackpadTimeoutId_,n.deltaPerZoom_=300,n}return yi(e,t),e.prototype.endInteraction_=function(){this.trackpadTimeoutId_=void 0,this.getMap().getView().endInteraction(void 0,this.lastDelta_?this.lastDelta_>0?1:-1:0,this.lastAnchor_)},e.prototype.handleEvent=function(t){if(!this.condition_(t))return!0;if(t.type!==dt)return!0;var e,n=t.map,o=t.originalEvent;if(o.preventDefault(),this.useAnchor_&&(this.lastAnchor_=t.coordinate),t.type==dt&&(e=o.deltaY,te&&o.deltaMode===WheelEvent.DOM_DELTA_PIXEL&&(e/=oe),o.deltaMode===WheelEvent.DOM_DELTA_LINE&&(e*=40)),0===e)return!1;this.lastDelta_=e;var i=Date.now();void 0===this.startTime_&&(this.startTime_=i),(!this.mode_||i-this.startTime_>this.trackpadEventGap_)&&(this.mode_=Math.abs(e)<4?mi:"wheel");var r=n.getView();if(this.mode_===mi&&!r.getConstrainResolution()&&!this.constrainResolution_)return this.trackpadTimeoutId_?clearTimeout(this.trackpadTimeoutId_):(r.getAnimating()&&r.cancelAnimations(),r.beginInteraction()),this.trackpadTimeoutId_=setTimeout(this.endInteraction_.bind(this),this.timeout_),r.adjustZoom(-e/this.deltaPerZoom_,this.lastAnchor_),this.startTime_=i,!1;this.totalDelta_+=e;var a=Math.max(this.timeout_-(i-this.startTime_),0);return clearTimeout(this.timeoutId_),this.timeoutId_=setTimeout(this.handleWheelZoom_.bind(this,n),a),!1},e.prototype.handleWheelZoom_=function(t){var e=t.getView();e.getAnimating()&&e.cancelAnimations();var n=-U(this.totalDelta_,-this.maxDelta_*this.deltaPerZoom_,this.maxDelta_*this.deltaPerZoom_)/this.deltaPerZoom_;(e.getConstrainResolution()||this.constrainResolution_)&&(n=n?n>0?1:-1:0),Ko(e,n,this.lastAnchor_,this.duration_),this.mode_=void 0,this.totalDelta_=0,this.lastAnchor_=null,this.startTime_=void 0,this.timeoutId_=void 0},e.prototype.setMouseAnchor=function(t){this.useAnchor_=t,t||(this.lastAnchor_=null)},e}(Zo);var Ci=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Ei=function(t){function e(e){var n=this,o=e||{},i=o;return i.stopDown||(i.stopDown=r),(n=t.call(this,i)||this).anchor_=null,n.lastAngle_=void 0,n.rotating_=!1,n.rotationDelta_=0,n.threshold_=void 0!==o.threshold?o.threshold:.3,n.duration_=void 0!==o.duration?o.duration:250,n}return Ci(e,t),e.prototype.handleDragEvent=function(t){var e=0,n=this.targetPointers[0],o=this.targetPointers[1],i=Math.atan2(o.clientY-n.clientY,o.clientX-n.clientX);if(void 0!==this.lastAngle_){var r=i-this.lastAngle_;this.rotationDelta_+=r,!this.rotating_&&Math.abs(this.rotationDelta_)>this.threshold_&&(this.rotating_=!0),e=r}this.lastAngle_=i;var a=t.map,s=a.getView();if(s.getConstraints().rotation!==Dn){var l=a.getViewport().getBoundingClientRect(),u=Uo(this.targetPointers);u[0]-=l.left,u[1]-=l.top,this.anchor_=a.getCoordinateFromPixelInternal(u),this.rotating_&&(a.render(),s.adjustRotationInternal(e,this.anchor_))}},e.prototype.handleUpEvent=function(t){return!(this.targetPointers.length<2&&(t.map.getView().endInteraction(this.duration_),1))},e.prototype.handleDownEvent=function(t){if(this.targetPointers.length>=2){var e=t.map;return this.anchor_=null,this.lastAngle_=void 0,this.rotating_=!1,this.rotationDelta_=0,this.handlingDownUpSequence||e.getView().beginInteraction(),!0}return!1},e}(Vo);var wi=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const bi=function(t){function e(e){var n=this,o=e||{},i=o;return i.stopDown||(i.stopDown=r),(n=t.call(this,i)||this).anchor_=null,n.duration_=void 0!==o.duration?o.duration:400,n.lastDistance_=void 0,n.lastScaleDelta_=1,n}return wi(e,t),e.prototype.handleDragEvent=function(t){var e=1,n=this.targetPointers[0],o=this.targetPointers[1],i=n.clientX-o.clientX,r=n.clientY-o.clientY,a=Math.sqrt(i*i+r*r);void 0!==this.lastDistance_&&(e=this.lastDistance_/a),this.lastDistance_=a;var s=t.map,l=s.getView();1!=e&&(this.lastScaleDelta_=e);var u=s.getViewport().getBoundingClientRect(),c=Uo(this.targetPointers);c[0]-=u.left,c[1]-=u.top,this.anchor_=s.getCoordinateFromPixelInternal(c),s.render(),l.adjustResolutionInternal(e,this.anchor_)},e.prototype.handleUpEvent=function(t){if(this.targetPointers.length<2){var e=t.map.getView(),n=this.lastScaleDelta_>1?1:-1;return e.endInteraction(this.duration_,n),!1}return!0},e.prototype.handleDownEvent=function(t){if(this.targetPointers.length>=2){var e=t.map;return this.anchor_=null,this.lastDistance_=void 0,this.lastScaleDelta_=1,this.handlingDownUpSequence||e.getView().beginInteraction(),!0}return!1},e}(Vo);var Pi=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Ti=function(t){function e(e){return(e=nt({},e)).controls||(e.controls=function(t){var e={},n=new xe;return(void 0===e.zoom||e.zoom)&&n.push(new zo(e.zoomOptions)),(void 0===e.rotate||e.rotate)&&n.push(new Fo(e.rotateOptions)),(void 0===e.attribution||e.attribution)&&n.push(new jo(e.attributionOptions)),n}()),e.interactions||(e.interactions=function(t){var e={onFocusOnly:!0}||{},n=new xe,o=new vi(-.005,.05,100);return(void 0===e.altShiftDragRotate||e.altShiftDragRotate)&&n.push(new ri),(void 0===e.doubleClickZoom||e.doubleClickZoom)&&n.push(new No({delta:e.zoomDelta,duration:e.zoomDuration})),(void 0===e.dragPan||e.dragPan)&&n.push(new oi({onFocusOnly:e.onFocusOnly,kinetic:o})),(void 0===e.pinchRotate||e.pinchRotate)&&n.push(new Ei),(void 0===e.pinchZoom||e.pinchZoom)&&n.push(new bi({duration:e.zoomDuration})),(void 0===e.keyboard||e.keyboard)&&(n.push(new di),n.push(new gi({delta:e.zoomDelta,duration:e.zoomDuration}))),(void 0===e.mouseWheelZoom||e.mouseWheelZoom)&&n.push(new xi({onFocusOnly:e.onFocusOnly,duration:e.zoomDuration})),(void 0===e.shiftDragZoom||e.shiftDragZoom)&&n.push(new pi({duration:e.zoomDuration})),n}()),t.call(this,e)||this}return Pi(e,t),e.prototype.createRenderer=function(){return new de(this)},e}(Ro),Oi="preload",Ri="useInterimTilesOnError";var Si=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Mi=function(t){function e(e){var n=this,o=e||{},i=nt({},o);return delete i.preload,delete i.useInterimTilesOnError,(n=t.call(this,i)||this).setPreload(void 0!==o.preload?o.preload:0),n.setUseInterimTilesOnError(void 0===o.useInterimTilesOnError||o.useInterimTilesOnError),n}return Si(e,t),e.prototype.getPreload=function(){return this.get(Oi)},e.prototype.setPreload=function(t){this.set(Oi,t)},e.prototype.getUseInterimTilesOnError=function(){return this.get(Ri)},e.prototype.setUseInterimTilesOnError=function(t){this.set(Ri,t)},e}(Xt);var Ii=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const ji=function(t){function e(e){var n=t.call(this)||this;return n.boundHandleImageChange_=n.handleImageChange_.bind(n),n.layer_=e,n.declutterExecutorGroup=null,n}return Ii(e,t),e.prototype.getFeatures=function(t){return s()},e.prototype.prepareFrame=function(t){return s()},e.prototype.renderFrame=function(t,e){return s()},e.prototype.loadedTileCallback=function(t,e,n){t[e]||(t[e]={}),t[e][n.tileCoord.toString()]=n},e.prototype.createLoadedTileFinder=function(t,e,n){return function(o,i){var r=this.loadedTileCallback.bind(this,n,o);return t.forEachLoadedTile(e,o,i,r)}.bind(this)},e.prototype.forEachFeatureAtCoordinate=function(t,e,n,o,i){},e.prototype.getDataAtPixel=function(t,e,n){return s()},e.prototype.getLayer=function(){return this.layer_},e.prototype.handleFontsChanged=function(){},e.prototype.handleImageChange_=function(t){2===t.target.getState()&&this.renderIfReadyAndVisible()},e.prototype.loadImage=function(t){var e=t.getState();return 2!=e&&3!=e&&t.addEventListener(st,this.boundHandleImageChange_),0==e&&(t.load(),e=t.getState()),2==e},e.prototype.renderIfReadyAndVisible=function(){var t=this.getLayer();t.getVisible()&&t.getSourceState()==Zt&&t.changed()},e}(mt);var Ai=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Fi=function(t){function e(e){var n=t.call(this,e)||this;return n.container=null,n.renderedResolution,n.tempTransform=[1,0,0,1,0,0],n.pixelTransform=[1,0,0,1,0,0],n.inversePixelTransform=[1,0,0,1,0,0],n.context=null,n.containerReused=!1,n}return Ai(e,t),e.prototype.useContainer=function(t,e,n){var o,i,r=this.getLayer().getClassName();if(t&&""===t.style.opacity&&t.className===r&&(s=t.firstElementChild)instanceof HTMLCanvasElement&&(i=s.getContext("2d")),!i||0!==i.canvas.width&&i.canvas.style.transform!==e?this.containerReused&&(this.container=null,this.context=null,this.containerReused=!1):(this.container=t,this.context=i,this.containerReused=!0),!this.container){(o=document.createElement("div")).className=r;var a=o.style;a.position="absolute",a.width="100%",a.height="100%";var s=(i=se()).canvas;o.appendChild(s),(a=s.style).position="absolute",a.left="0",a.transformOrigin="top left",this.container=o,this.context=i}},e.prototype.clip=function(t,e,n){var o=e.pixelRatio,i=e.size[0]*o/2,r=e.size[1]*o/2,a=e.viewState.rotation,s=K(n),l=Z(n),u=A(n),c=j(n);d(e.coordinateToPixelTransform,s),d(e.coordinateToPixelTransform,l),d(e.coordinateToPixelTransform,u),d(e.coordinateToPixelTransform,c),t.save(),he(t,-a,i,r),t.beginPath(),t.moveTo(s[0]*o,s[1]*o),t.lineTo(l[0]*o,l[1]*o),t.lineTo(u[0]*o,u[1]*o),t.lineTo(c[0]*o,c[1]*o),t.clip(),he(t,a,i,r)},e.prototype.clipUnrotated=function(t,e,n){var o=K(n),i=Z(n),r=A(n),a=j(n);d(e.coordinateToPixelTransform,o),d(e.coordinateToPixelTransform,i),d(e.coordinateToPixelTransform,r),d(e.coordinateToPixelTransform,a);var s=this.inversePixelTransform;d(s,o),d(s,i),d(s,r),d(s,a),t.save(),t.beginPath(),t.moveTo(Math.round(o[0]),Math.round(o[1])),t.lineTo(Math.round(i[0]),Math.round(i[1])),t.lineTo(Math.round(r[0]),Math.round(r[1])),t.lineTo(Math.round(a[0]),Math.round(a[1])),t.clip()},e.prototype.dispatchRenderEvent_=function(t,e,n){var o=this.getLayer();if(o.hasListener(t)){var i=new Bt(t,this.inversePixelTransform,n,e);o.dispatchEvent(i)}},e.prototype.preRender=function(t,e){this.dispatchRenderEvent_("prerender",t,e)},e.prototype.postRender=function(t,e){this.dispatchRenderEvent_("postrender",t,e)},e.prototype.getRenderTransform=function(t,e,n,o,i,r,a){var s=i/2,l=r/2,u=o/e,c=-u,h=-t[0]+a,p=-t[1];return _(this.tempTransform,s,l,u,c,-n,h,p)},e.prototype.getDataAtPixel=function(t,e,n){var o,i=d(this.inversePixelTransform,t.slice()),r=this.context,a=this.getLayer().getExtent();if(a&&!C(a,d(e.pixelToCoordinateTransform,t.slice())))return null;try{var s=Math.round(i[0]),l=Math.round(i[1]),u=document.createElement("canvas"),c=u.getContext("2d");u.width=1,u.height=1,c.clearRect(0,0,1,1),c.drawImage(r.canvas,s,l,1,1,0,0,1,1),o=c.getImageData(0,0,1,1).data}catch(t){return"SecurityError"===t.name?new Uint8Array:o}return 0===o[3]?null:o},e}(ji);var Li=function(){function t(t,e,n,o){this.minX=t,this.maxX=e,this.minY=n,this.maxY=o}return t.prototype.contains=function(t){return this.containsXY(t[1],t[2])},t.prototype.containsTileRange=function(t){return this.minX<=t.minX&&t.maxX<=this.maxX&&this.minY<=t.minY&&t.maxY<=this.maxY},t.prototype.containsXY=function(t,e){return this.minX<=t&&t<=this.maxX&&this.minY<=e&&e<=this.maxY},t.prototype.equals=function(t){return this.minX==t.minX&&this.minY==t.minY&&this.maxX==t.maxX&&this.maxY==t.maxY},t.prototype.extend=function(t){t.minX<this.minX&&(this.minX=t.minX),t.maxX>this.maxX&&(this.maxX=t.maxX),t.minY<this.minY&&(this.minY=t.minY),t.maxY>this.maxY&&(this.maxY=t.maxY)},t.prototype.getHeight=function(){return this.maxY-this.minY+1},t.prototype.getSize=function(){return[this.getWidth(),this.getHeight()]},t.prototype.getWidth=function(){return this.maxX-this.minX+1},t.prototype.intersects=function(t){return this.minX<=t.maxX&&this.maxX>=t.minX&&this.minY<=t.maxY&&this.maxY>=t.minY},t}();function zi(t,e,n,o,i){return void 0!==i?(i.minX=t,i.maxX=e,i.minY=n,i.maxY=o,i):new Li(t,e,n,o)}const Di=Li;var ki=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Ki=function(t){function n(e){var n=t.call(this,e)||this;return n.extentChanged=!0,n.renderedExtent_=null,n.renderedPixelRatio,n.renderedProjection=null,n.renderedRevision,n.renderedTiles=[],n.newTiles_=!1,n.tmpExtent=[1/0,1/0,-1/0,-1/0],n.tmpTileRange_=new Di(0,0,0,0),n}return ki(n,t),n.prototype.isDrawableTile=function(t){var e=this.getLayer(),n=t.getState(),o=e.getUseInterimTilesOnError();return 2==n||4==n||3==n&&!o},n.prototype.getTile=function(t,e,n,o){var i=o.pixelRatio,r=o.viewState.projection,a=this.getLayer(),s=a.getSource().getTile(t,e,n,i,r);return 3==s.getState()&&(a.getUseInterimTilesOnError()?a.getPreload()>0&&(this.newTiles_=!0):s.setState(2)),this.isDrawableTile(s)||(s=s.getInterimTile()),s},n.prototype.loadedTileCallback=function(e,n,o){return!!this.isDrawableTile(o)&&t.prototype.loadedTileCallback.call(this,e,n,o)},n.prototype.prepareFrame=function(t){return!!this.getLayer().getSource()},n.prototype.renderFrame=function(t,n){var o=t.layerStatesArray[t.layerIndex],i=t.viewState,r=i.projection,a=i.resolution,s=i.center,l=i.rotation,c=t.pixelRatio,h=this.getLayer(),p=h.getSource(),f=p.getRevision(),y=p.getTileGridForProjection(r),m=y.getZForResolution(a,p.zDirection),x=y.getResolution(m),C=t.extent,E=o.extent&&In(o.extent);E&&(C=k(C,In(o.extent)));var w=p.getTilePixelRatio(c),b=Math.round(t.size[0]*w),P=Math.round(t.size[1]*w);if(l){var O=Math.round(Math.sqrt(b*b+P*P));b=O,P=O}var R=x*b/2/w,S=x*P/2/w,M=[s[0]-R,s[1]-S,s[0]+R,s[1]+S],I=y.getTileRangeForExtentAndZ(C,m),j={};j[m]={};var A=this.createLoadedTileFinder(p,r,j),F=this.tmpExtent,L=this.tmpTileRange_;this.newTiles_=!1;for(var z=I.minX;z<=I.maxX;++z)for(var D=I.minY;D<=I.maxY;++D){var Z=this.getTile(m,z,D,t);if(this.isDrawableTile(Z)){var G=u(this);if(2==Z.getState()){j[m][Z.tileCoord.toString()]=Z;var N=Z.inTransition(G);this.newTiles_||!N&&-1!==this.renderedTiles.indexOf(Z)||(this.newTiles_=!0)}if(1===Z.getAlpha(G,t.time))continue}var X=y.getTileCoordChildTileRange(Z.tileCoord,L,F),U=!1;X&&(U=A(m+1,X)),U||y.forEachTileCoordParentTileRange(Z.tileCoord,A,L,F)}var V=x/a;_(this.pixelTransform,t.size[0]/2,t.size[1]/2,1/w,1/w,l,-b/2,-P/2);var W=function(t){return ie?v(t):(pe||(pe=se(1,1).canvas),pe.style.transform=v(t),pe.style.transform)}(this.pixelTransform);this.useContainer(n,W,o.opacity);var Y=this.context,q=Y.canvas;g(this.inversePixelTransform,this.pixelTransform),_(this.tempTransform,b/2,P/2,V,V,0,-b/2,-P/2),q.width!=b||q.height!=P?(q.width=b,q.height=P):this.containerReused||Y.clearRect(0,0,b,P),E&&this.clipUnrotated(Y,t,E),nt(Y,p.getContextOptions()),this.preRender(Y,t),this.renderedTiles.length=0;var H,B,Q,$=Object.keys(j).map(Number);$.sort(e),1!==o.opacity||this.containerReused&&!p.getOpaque(t.viewState.projection)?(H=[],B=[]):$=$.reverse();for(var J=$.length-1;J>=0;--J){var tt=$[J],et=p.getTilePixelSize(tt,c,r),ot=y.getResolution(tt)/x,it=et[0]*ot*V,rt=et[1]*ot*V,at=y.getTileCoordForCoordAndZ(K(M),tt),st=y.getTileCoordExtent(at),lt=d(this.tempTransform,[w*(st[0]-M[0])/x,w*(M[3]-st[3])/x]),ut=w*p.getGutterForProjection(r),ct=j[tt];for(var ht in ct){var pt=(Z=ct[ht]).tileCoord,ft=lt[0]-(at[1]-pt[1])*it,dt=Math.round(ft+it),_t=lt[1]-(at[2]-pt[2])*rt,gt=Math.round(_t+rt),vt=dt-(z=Math.round(ft)),yt=gt-(D=Math.round(_t)),mt=m===tt;if(!(N=mt&&1!==Z.getAlpha(u(this),t.time)))if(H){Y.save(),Q=[z,D,z+vt,D,z+vt,D+yt,z,D+yt];for(var xt=0,Ct=H.length;xt<Ct;++xt)if(m!==tt&&tt<B[xt]){var Et=H[xt];Y.beginPath(),Y.moveTo(Q[0],Q[1]),Y.lineTo(Q[2],Q[3]),Y.lineTo(Q[4],Q[5]),Y.lineTo(Q[6],Q[7]),Y.moveTo(Et[6],Et[7]),Y.lineTo(Et[4],Et[5]),Y.lineTo(Et[2],Et[3]),Y.lineTo(Et[0],Et[1]),Y.clip()}H.push(Q),B.push(tt)}else Y.clearRect(z,D,vt,yt);this.drawTileImage(Z,t,z,D,vt,yt,ut,mt,o.opacity),H&&!N&&Y.restore(),this.renderedTiles.push(Z),this.updateUsedTiles(t.usedTiles,p,Z)}}return this.renderedRevision=f,this.renderedResolution=x,this.extentChanged=!this.renderedExtent_||!T(this.renderedExtent_,M),this.renderedExtent_=M,this.renderedPixelRatio=c,this.renderedProjection=r,this.manageTilePyramid(t,p,y,c,r,C,m,h.getPreload()),this.scheduleExpireCache(t,p),this.postRender(Y,t),o.extent&&Y.restore(),W!==q.style.transform&&(q.style.transform=W),this.container},n.prototype.drawTileImage=function(t,e,n,o,i,r,a,s,l){var c=this.getTileImage(t);if(c){var h=u(this),p=s?t.getAlpha(h,e.time):1,f=l*p,d=f!==this.context.globalAlpha;d&&(this.context.save(),this.context.globalAlpha=f),this.context.drawImage(c,a,a,c.width-2*a,c.height-2*a,n,o,i,r),d&&this.context.restore(),1!==p?e.animate=!0:s&&t.endTransition(h)}},n.prototype.getImage=function(){var t=this.context;return t?t.canvas:null},n.prototype.getTileImage=function(t){return t.getImage()},n.prototype.scheduleExpireCache=function(t,e){if(e.canExpireCache()){var n=function(t,e,n){var o=u(t);o in n.usedTiles&&t.expireCache(n.viewState.projection,n.usedTiles[o])}.bind(null,e);t.postRenderFunctions.push(n)}},n.prototype.updateUsedTiles=function(t,e,n){var o=u(e);o in t||(t[o]={}),t[o][n.getKey()]=!0},n.prototype.manageTilePyramid=function(t,e,n,o,i,r,a,s,l){var c=u(e);c in t.wantedTiles||(t.wantedTiles[c]={});var h,p,f,d,_,g,v=t.wantedTiles[c],y=t.tileQueue,m=0;for(g=n.getMinZoom();g<=a;++g)for(p=n.getTileRangeForExtentAndZ(r,g,p),f=n.getResolution(g),d=p.minX;d<=p.maxX;++d)for(_=p.minY;_<=p.maxY;++_)a-g<=s?(++m,0==(h=e.getTile(g,d,_,o,i)).getState()&&(v[h.getKey()]=!0,y.isKeyQueued(h.getKey())||y.enqueue([h,c,n.getTileCoordCenter(h.tileCoord),f])),void 0!==l&&l(h)):e.useTile(g,d,_,i);e.updateCacheSize(m,i)},n}(Fi);Ki.prototype.getLayer;const Zi=Ki;var Gi=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Ni=function(t){function e(e){return t.call(this,e)||this}return Gi(e,t),e.prototype.createRenderer=function(){return new Zi(this)},e}(Mi);var Xi=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Ui=function(t){function e(e,n,o){var i=t.call(this)||this,r=o||{};return i.tileCoord=e,i.state=n,i.interimTile=null,i.hifi=!0,i.key="",i.transition_=void 0===r.transition?250:r.transition,i.transitionStarts_={},i}return Xi(e,t),e.prototype.changed=function(){this.dispatchEvent(st)},e.prototype.release=function(){},e.prototype.getKey=function(){return this.key+"/"+this.tileCoord},e.prototype.getInterimTile=function(){if(!this.interimTile)return this;var t=this.interimTile;do{if(2==t.getState())return this.transition_=0,t;t=t.interimTile}while(t);return this},e.prototype.refreshInterimChain=function(){if(this.interimTile){var t=this.interimTile,e=this;do{if(2==t.getState()){t.interimTile=null;break}1==t.getState()?e=t:0==t.getState()?e.interimTile=t.interimTile:e=t,t=e.interimTile}while(t)}},e.prototype.getTileCoord=function(){return this.tileCoord},e.prototype.getState=function(){return this.state},e.prototype.setState=function(t){if(3!==this.state&&this.state>t)throw new Error("Tile load sequence violation");this.state=t,this.changed()},e.prototype.load=function(){s()},e.prototype.getAlpha=function(t,e){if(!this.transition_)return 1;var n=this.transitionStarts_[t];if(n){if(-1===n)return 1}else n=e,this.transitionStarts_[t]=n;var o=e-n+1e3/60;return o>=this.transition_?1:Kn(o/this.transition_)},e.prototype.inTransition=function(t){return!!this.transition_&&-1!==this.transitionStarts_[t]},e.prototype.endTransition=function(t){this.transition_&&(this.transitionStarts_[t]=-1)},e}(at);var Vi=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Wi=function(t){function e(e,n,o,i){var r=t.call(this)||this;return r.extent=e,r.pixelRatio_=o,r.resolution=n,r.state=i,r}return Vi(e,t),e.prototype.changed=function(){this.dispatchEvent(st)},e.prototype.getExtent=function(){return this.extent},e.prototype.getImage=function(){return s()},e.prototype.getPixelRatio=function(){return this.pixelRatio_},e.prototype.getResolution=function(){return this.resolution},e.prototype.getState=function(){return this.state},e.prototype.load=function(){s()},e}(at);var Yi=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();function qi(t,e,n){var o=t;if(o.src&&re){var i=o.decode(),r=!0;return i.then((function(){r&&e()})).catch((function(t){r&&("EncodingError"===t.name&&"Invalid image type."===t.message?e():n())})),function(){r=!1}}var a=[gt(o,"load",e),gt(o,"error",n)];return function(){a.forEach(vt)}}!function(t){function e(e,n,o,i,r,a){var s=t.call(this,e,n,o,0)||this;return s.src_=i,s.image_=new Image,null!==r&&(s.image_.crossOrigin=r),s.unlisten_=null,s.state=0,s.imageLoadFunction_=a,s}Yi(e,t),e.prototype.getImage=function(){return this.image_},e.prototype.handleImageError_=function(){this.state=3,this.unlistenImage_(),this.changed()},e.prototype.handleImageLoad_=function(){void 0===this.resolution&&(this.resolution=D(this.extent)/this.image_.height),this.state=2,this.unlistenImage_(),this.changed()},e.prototype.load=function(){0!=this.state&&3!=this.state||(this.state=1,this.changed(),this.imageLoadFunction_(this,this.src_),this.unlisten_=qi(this.image_,this.handleImageLoad_.bind(this),this.handleImageError_.bind(this)))},e.prototype.setImage=function(t){this.image_=t},e.prototype.unlistenImage_=function(){this.unlisten_&&(this.unlisten_(),this.unlisten_=null)}}(Wi);var Hi=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Bi=function(t){function e(e,n,o,i,r,a){var s=t.call(this,e,n,a)||this;return s.crossOrigin_=i,s.src_=o,s.key=o,s.image_=new Image,null!==i&&(s.image_.crossOrigin=i),s.unlisten_=null,s.tileLoadFunction_=r,s}return Hi(e,t),e.prototype.getImage=function(){return this.image_},e.prototype.handleImageError_=function(){var t;this.state=3,this.unlistenImage_(),this.image_=((t=se(1,1)).fillStyle="rgba(0,0,0,0)",t.fillRect(0,0,1,1),t.canvas),this.changed()},e.prototype.handleImageLoad_=function(){var t=this.image_;t.naturalWidth&&t.naturalHeight?this.state=2:this.state=4,this.unlistenImage_(),this.changed()},e.prototype.load=function(){3==this.state&&(this.state=0,this.image_=new Image,null!==this.crossOrigin_&&(this.image_.crossOrigin=this.crossOrigin_)),0==this.state&&(this.state=1,this.changed(),this.tileLoadFunction_(this,this.src_),this.unlisten_=qi(this.image_,this.handleImageLoad_.bind(this),this.handleImageError_.bind(this)))},e.prototype.unlistenImage_=function(){this.unlisten_&&(this.unlisten_(),this.unlisten_=null)},e}(Ui),Qi=function(){function t(t,e,n,o,i,r){this.sourceProj_=t,this.targetProj_=e;var a={},s=En(this.targetProj_,this.sourceProj_);this.transformInv_=function(t){var e=t[0]+"/"+t[1];return a[e]||(a[e]=s(t)),a[e]},this.maxSourceExtent_=o,this.errorThresholdSquared_=i*i,this.triangles_=[],this.wrapsXInSource_=!1,this.canWrapXInSource_=this.sourceProj_.canWrapX()&&!!o&&!!this.sourceProj_.getExtent()&&G(o)==G(this.sourceProj_.getExtent()),this.sourceWorldWidth_=this.sourceProj_.getExtent()?G(this.sourceProj_.getExtent()):null,this.targetWorldWidth_=this.targetProj_.getExtent()?G(this.targetProj_.getExtent()):null;var l=K(n),u=Z(n),c=A(n),h=j(n),p=this.transformInv_(l),f=this.transformInv_(u),d=this.transformInv_(c),_=this.transformInv_(h),g=10+(r?Math.max(0,Math.ceil(W(I(n)/(r*r*256*256)))):0);if(this.addQuad_(l,u,c,h,p,f,d,_,g),this.wrapsXInSource_){var v=1/0;this.triangles_.forEach((function(t,e,n){v=Math.min(v,t.source[0][0],t.source[1][0],t.source[2][0])})),this.triangles_.forEach(function(t){if(Math.max(t.source[0][0],t.source[1][0],t.source[2][0])-v>this.sourceWorldWidth_/2){var e=[[t.source[0][0],t.source[0][1]],[t.source[1][0],t.source[1][1]],[t.source[2][0],t.source[2][1]]];e[0][0]-v>this.sourceWorldWidth_/2&&(e[0][0]-=this.sourceWorldWidth_),e[1][0]-v>this.sourceWorldWidth_/2&&(e[1][0]-=this.sourceWorldWidth_),e[2][0]-v>this.sourceWorldWidth_/2&&(e[2][0]-=this.sourceWorldWidth_);var n=Math.min(e[0][0],e[1][0],e[2][0]);Math.max(e[0][0],e[1][0],e[2][0])-n<this.sourceWorldWidth_/2&&(t.source=e)}}.bind(this))}a={}}return t.prototype.addTriangle_=function(t,e,n,o,i,r){this.triangles_.push({source:[o,i,r],target:[t,e,n]})},t.prototype.addQuad_=function(t,e,n,o,i,r,a,s,l){var u=m([i,r,a,s]),c=this.sourceWorldWidth_?G(u)/this.sourceWorldWidth_:null,h=this.sourceWorldWidth_,p=this.sourceProj_.canWrapX()&&c>.5&&c<1,f=!1;if(l>0&&(this.targetProj_.isGlobal()&&this.targetWorldWidth_&&(f=G(m([t,e,n,o]))/this.targetWorldWidth_>.25||f),!p&&this.sourceProj_.isGlobal()&&c&&(f=c>.25||f)),!(!f&&this.maxSourceExtent_&&isFinite(u[0])&&isFinite(u[1])&&isFinite(u[2])&&isFinite(u[3]))||N(u,this.maxSourceExtent_)){var d=0;if(!(f||isFinite(i[0])&&isFinite(i[1])&&isFinite(r[0])&&isFinite(r[1])&&isFinite(a[0])&&isFinite(a[1])&&isFinite(s[0])&&isFinite(s[1])))if(l>0)f=!0;else if(1!=(d=(isFinite(i[0])&&isFinite(i[1])?0:8)+(isFinite(r[0])&&isFinite(r[1])?0:4)+(isFinite(a[0])&&isFinite(a[1])?0:2)+(isFinite(s[0])&&isFinite(s[1])?0:1))&&2!=d&&4!=d&&8!=d)return;if(l>0){if(!f){var _=[(t[0]+n[0])/2,(t[1]+n[1])/2],g=this.transformInv_(_),v=void 0;v=p?(B(i[0],h)+B(a[0],h))/2-B(g[0],h):(i[0]+a[0])/2-g[0];var y=(i[1]+a[1])/2-g[1];f=v*v+y*y>this.errorThresholdSquared_}if(f){if(Math.abs(t[0]-n[0])<=Math.abs(t[1]-n[1])){var x=[(e[0]+n[0])/2,(e[1]+n[1])/2],C=this.transformInv_(x),E=[(o[0]+t[0])/2,(o[1]+t[1])/2],w=this.transformInv_(E);this.addQuad_(t,e,x,E,i,r,C,w,l-1),this.addQuad_(E,x,n,o,w,C,a,s,l-1)}else{var b=[(t[0]+e[0])/2,(t[1]+e[1])/2],P=this.transformInv_(b),T=[(n[0]+o[0])/2,(n[1]+o[1])/2],O=this.transformInv_(T);this.addQuad_(t,b,T,o,i,P,O,s,l-1),this.addQuad_(b,e,n,T,P,r,a,O,l-1)}return}}if(p){if(!this.canWrapXInSource_)return;this.wrapsXInSource_=!0}0==(11&d)&&this.addTriangle_(t,n,o,i,a,s),0==(14&d)&&this.addTriangle_(t,n,e,i,a,r),d&&(0==(13&d)&&this.addTriangle_(e,o,t,r,s,i),0==(7&d)&&this.addTriangle_(e,o,n,r,s,a))}},t.prototype.calculateSourceExtent=function(){var t=[1/0,1/0,-1/0,-1/0];return this.triangles_.forEach((function(e,n,o){var i=e.source;O(t,i[0]),O(t,i[1]),O(t,i[2])})),t},t.prototype.getTriangles=function(){return this.triangles_},t}();var $i,Ji={imageSmoothingEnabled:!1,msImageSmoothingEnabled:!1};function tr(t,e,n,o,i){t.beginPath(),t.moveTo(0,0),t.lineTo(e,n),t.lineTo(o,i),t.closePath(),t.save(),t.clip(),t.fillRect(0,0,Math.max(e,o)+1,Math.max(n,i)),t.restore()}function er(t,e){return Math.abs(t[4*e]-210)>2||Math.abs(t[4*e+3]-191.25)>2}function nr(t,e,n,o){var i=wn(n,e,t),r=gn(e,o,n),a=e.getMetersPerUnit();void 0!==a&&(r*=a);var s=t.getMetersPerUnit();void 0!==s&&(r/=s);var l=t.getExtent();if(!l||C(l,i)){var u=gn(t,r,i)/r;isFinite(u)&&u>0&&(r/=u)}return r}var or=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const ir=function(t){function e(e,n,o,i,r,a,s,l,u,c,h,p){var f=t.call(this,r,0)||this;f.renderEdges_=void 0!==h&&h,f.contextOptions_=p,f.pixelRatio_=s,f.gutter_=l,f.canvas_=null,f.sourceTileGrid_=n,f.targetTileGrid_=i,f.wrappedTileCoord_=a||r,f.sourceTiles_=[],f.sourcesListenerKeys_=null,f.sourceZ_=0;var d=i.getTileCoordExtent(f.wrappedTileCoord_),_=f.targetTileGrid_.getExtent(),g=f.sourceTileGrid_.getExtent(),v=_?k(d,_):d;if(0===I(v))return f.state=4,f;var y=e.getExtent();y&&(g=g?k(g,y):y);var m=i.getResolution(f.wrappedTileCoord_[0]),x=function(t,e,n,o){var i=F(n),r=nr(t,e,i,o);return(!isFinite(r)||r<=0)&&M(n,(function(n){return r=nr(t,e,n,o),isFinite(r)&&r>0})),r}(e,o,v,m);if(!isFinite(x)||x<=0)return f.state=4,f;var C=void 0!==c?c:.5;if(f.triangulation_=new Qi(e,o,v,g,x*C,m),0===f.triangulation_.getTriangles().length)return f.state=4,f;f.sourceZ_=n.getZForResolution(x);var E=f.triangulation_.calculateSourceExtent();if(g&&(e.canWrapX()?(E[1]=U(E[1],g[1],g[3]),E[3]=U(E[3],g[1],g[3])):E=k(E,g)),I(E)){for(var w=n.getTileRangeForExtentAndZ(E,f.sourceZ_),b=w.minX;b<=w.maxX;b++)for(var P=w.minY;P<=w.maxY;P++){var T=u(f.sourceZ_,b,P,s);T&&f.sourceTiles_.push(T)}0===f.sourceTiles_.length&&(f.state=4)}else f.state=4;return f}return or(e,t),e.prototype.getImage=function(){return this.canvas_},e.prototype.reproject_=function(){var t=[];if(this.sourceTiles_.forEach(function(e,n,o){e&&2==e.getState()&&t.push({extent:this.sourceTileGrid_.getTileCoordExtent(e.tileCoord),image:e.getImage()})}.bind(this)),this.sourceTiles_.length=0,0===t.length)this.state=3;else{var e=this.wrappedTileCoord_[0],n=this.targetTileGrid_.getTileSize(e),o="number"==typeof n?n:n[0],i="number"==typeof n?n:n[1],r=this.targetTileGrid_.getResolution(e),a=this.sourceTileGrid_.getResolution(this.sourceZ_),s=this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);this.canvas_=function(t,e,n,o,i,r,a,s,l,u,c,h){var p=se(Math.round(n*t),Math.round(n*e));if(nt(p,h),0===l.length)return p.canvas;function f(t){return Math.round(t*n)/n}p.scale(n,n),p.globalCompositeOperation="lighter";var d=[1/0,1/0,-1/0,-1/0];l.forEach((function(t,e,n){var o,i;o=d,(i=t.extent)[0]<o[0]&&(o[0]=i[0]),i[2]>o[2]&&(o[2]=i[2]),i[1]<o[1]&&(o[1]=i[1]),i[3]>o[3]&&(o[3]=i[3])}));var _=G(d),g=D(d),v=se(Math.round(n*_/o),Math.round(n*g/o));nt(v,h);var y=n/o;l.forEach((function(t,e,n){var o=t.extent[0]-d[0],i=-(t.extent[3]-d[3]),r=G(t.extent),a=D(t.extent);t.image.width>0&&t.image.height>0&&v.drawImage(t.image,u,u,t.image.width-2*u,t.image.height-2*u,o*y,i*y,r*y,a*y)}));var m=K(a);return s.getTriangles().forEach((function(t,e,i){var a=t.source,s=t.target,l=a[0][0],u=a[0][1],c=a[1][0],_=a[1][1],g=a[2][0],y=a[2][1],x=f((s[0][0]-m[0])/r),C=f(-(s[0][1]-m[1])/r),E=f((s[1][0]-m[0])/r),w=f(-(s[1][1]-m[1])/r),b=f((s[2][0]-m[0])/r),P=f(-(s[2][1]-m[1])/r),T=l,O=u;l=0,u=0;var R=function(t){for(var e=t.length,n=0;n<e;n++){for(var o=n,i=Math.abs(t[n][n]),r=n+1;r<e;r++){var a=Math.abs(t[r][n]);a>i&&(i=a,o=r)}if(0===i)return null;var s=t[o];t[o]=t[n],t[n]=s;for(var l=n+1;l<e;l++)for(var u=-t[l][n]/t[n][n],c=n;c<e+1;c++)n==c?t[l][c]=0:t[l][c]+=u*t[n][c]}for(var h=new Array(e),p=e-1;p>=0;p--){h[p]=t[p][e]/t[p][p];for(var f=p-1;f>=0;f--)t[f][e]-=t[f][p]*h[p]}return h}([[c-=T,_-=O,0,0,E-x],[g-=T,y-=O,0,0,b-x],[0,0,c,_,w-C],[0,0,g,y,P-C]]);if(R){if(p.save(),p.beginPath(),function(){if(void 0===$i){var t=document.createElement("canvas").getContext("2d");t.globalCompositeOperation="lighter",t.fillStyle="rgba(210, 0, 0, 0.75)",tr(t,4,5,4,0),tr(t,4,5,0,5);var e=t.getImageData(0,0,3,3).data;$i=er(e,0)||er(e,4)||er(e,8)}return $i}()||h===Ji){p.moveTo(E,w);for(var S=x-E,M=C-w,I=0;I<4;I++)p.lineTo(E+f((I+1)*S/4),w+f(I*M/3)),3!=I&&p.lineTo(E+f((I+1)*S/4),w+f((I+1)*M/3));p.lineTo(b,P)}else p.moveTo(E,w),p.lineTo(x,C),p.lineTo(b,P);p.clip(),p.transform(R[0],R[2],R[1],R[3],x,C),p.translate(d[0]-T,d[3]-O),p.scale(o/n,-o/n),p.drawImage(v.canvas,0,0),p.restore()}})),c&&(p.save(),p.globalCompositeOperation="source-over",p.strokeStyle="black",p.lineWidth=1,s.getTriangles().forEach((function(t,e,n){var o=t.target,i=(o[0][0]-m[0])/r,a=-(o[0][1]-m[1])/r,s=(o[1][0]-m[0])/r,l=-(o[1][1]-m[1])/r,u=(o[2][0]-m[0])/r,c=-(o[2][1]-m[1])/r;p.beginPath(),p.moveTo(s,l),p.lineTo(i,a),p.lineTo(u,c),p.closePath(),p.stroke()})),p.restore()),p.canvas}(o,i,this.pixelRatio_,a,this.sourceTileGrid_.getExtent(),r,s,this.triangulation_,t,this.gutter_,this.renderEdges_,this.contextOptions_),this.state=2}this.changed()},e.prototype.load=function(){if(0==this.state){this.state=1,this.changed();var t=0;this.sourcesListenerKeys_=[],this.sourceTiles_.forEach(function(e,n,o){var i=e.getState();if(0==i||1==i){t++;var r=_t(e,st,(function(n){var o=e.getState();2!=o&&3!=o&&4!=o||(vt(r),0==--t&&(this.unlistenSources_(),this.reproject_()))}),this);this.sourcesListenerKeys_.push(r)}}.bind(this)),this.sourceTiles_.forEach((function(t,e,n){0==t.getState()&&t.load()})),0===t&&setTimeout(this.reproject_.bind(this),0)}},e.prototype.unlistenSources_=function(){this.sourcesListenerKeys_.forEach(vt),this.sourcesListenerKeys_=null},e}(Ui),rr=function(){function t(t){this.highWaterMark=void 0!==t?t:2048,this.count_=0,this.entries_={},this.oldest_=null,this.newest_=null}return t.prototype.canExpireCache=function(){return this.highWaterMark>0&&this.getCount()>this.highWaterMark},t.prototype.clear=function(){this.count_=0,this.entries_={},this.oldest_=null,this.newest_=null},t.prototype.containsKey=function(t){return this.entries_.hasOwnProperty(t)},t.prototype.forEach=function(t){for(var e=this.oldest_;e;)t(e.value_,e.key_,this),e=e.newer},t.prototype.get=function(t,e){var n=this.entries_[t];return f(void 0!==n,15),n===this.newest_||(n===this.oldest_?(this.oldest_=this.oldest_.newer,this.oldest_.older=null):(n.newer.older=n.older,n.older.newer=n.newer),n.newer=null,n.older=this.newest_,this.newest_.newer=n,this.newest_=n),n.value_},t.prototype.remove=function(t){var e=this.entries_[t];return f(void 0!==e,15),e===this.newest_?(this.newest_=e.older,this.newest_&&(this.newest_.newer=null)):e===this.oldest_?(this.oldest_=e.newer,this.oldest_&&(this.oldest_.older=null)):(e.newer.older=e.older,e.older.newer=e.newer),delete this.entries_[t],--this.count_,e.value_},t.prototype.getCount=function(){return this.count_},t.prototype.getKeys=function(){var t,e=new Array(this.count_),n=0;for(t=this.newest_;t;t=t.older)e[n++]=t.key_;return e},t.prototype.getValues=function(){var t,e=new Array(this.count_),n=0;for(t=this.newest_;t;t=t.older)e[n++]=t.value_;return e},t.prototype.peekLast=function(){return this.oldest_.value_},t.prototype.peekLastKey=function(){return this.oldest_.key_},t.prototype.peekFirstKey=function(){return this.newest_.key_},t.prototype.pop=function(){var t=this.oldest_;return delete this.entries_[t.key_],t.newer&&(t.newer.older=null),this.oldest_=t.newer,this.oldest_||(this.newest_=null),--this.count_,t.value_},t.prototype.replace=function(t,e){this.get(t),this.entries_[t].value_=e},t.prototype.set=function(t,e){f(!(t in this.entries_),16);var n={key_:t,newer:null,older:this.newest_,value_:e};this.newest_?this.newest_.newer=n:this.oldest_=n,this.newest_=n,this.entries_[t]=n,++this.count_},t.prototype.setSize=function(t){this.highWaterMark=t},t}();function ar(t,e,n,o){return void 0!==o?(o[0]=t,o[1]=e,o[2]=n,o):[t,e,n]}function sr(t,e,n){return t+"/"+e+"/"+n}function lr(t){return sr(t[0],t[1],t[2])}var ur=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const cr=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return ur(e,t),e.prototype.expireCache=function(t){for(;this.canExpireCache()&&!(this.peekLast().getKey()in t);)this.pop().release()},e.prototype.pruneExceptNewestZ=function(){if(0!==this.getCount()){var t=(e=this.peekFirstKey(),e.split("/").map(Number))[0];this.forEach(function(e){e.tileCoord[0]!==t&&(this.remove(lr(e.tileCoord)),e.release())}.bind(this))}var e},e}(rr);var hr=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();function pr(t){return t?Array.isArray(t)?function(e){return t}:"function"==typeof t?t:function(e){return[t]}:null}const fr=function(t){function e(e){var n=t.call(this)||this;return n.projection_=_n(e.projection),n.attributions_=pr(e.attributions),n.attributionsCollapsible_=void 0===e.attributionsCollapsible||e.attributionsCollapsible,n.loading=!1,n.state_=void 0!==e.state?e.state:Zt,n.wrapX_=void 0!==e.wrapX&&e.wrapX,n}return hr(e,t),e.prototype.getAttributions=function(){return this.attributions_},e.prototype.getAttributionsCollapsible=function(){return this.attributionsCollapsible_},e.prototype.getProjection=function(){return this.projection_},e.prototype.getResolutions=function(){return s()},e.prototype.getState=function(){return this.state_},e.prototype.getWrapX=function(){return this.wrapX_},e.prototype.getContextOptions=function(){},e.prototype.refresh=function(){this.changed()},e.prototype.setAttributions=function(t){this.attributions_=pr(t),this.changed()},e.prototype.setState=function(t){this.state_=t,this.changed()},e}(Pt);var dr=[0,0,0];const _r=function(){function t(t){var n,o,i;if(this.minZoom=void 0!==t.minZoom?t.minZoom:0,this.resolutions_=t.resolutions,f((n=this.resolutions_,!0,o=function(t,e){return e-t}||e,n.every((function(t,e){if(0===e)return!0;var i=o(n[e-1],t);return!(i>0||0===i)}))),17),!t.origins)for(var r=0,a=this.resolutions_.length-1;r<a;++r)if(i){if(this.resolutions_[r]/this.resolutions_[r+1]!==i){i=void 0;break}}else i=this.resolutions_[r]/this.resolutions_[r+1];this.zoomFactor_=i,this.maxZoom=this.resolutions_.length-1,this.origin_=void 0!==t.origin?t.origin:null,this.origins_=null,void 0!==t.origins&&(this.origins_=t.origins,f(this.origins_.length==this.resolutions_.length,20));var s=t.extent;void 0===s||this.origin_||this.origins_||(this.origin_=K(s)),f(!this.origin_&&this.origins_||this.origin_&&!this.origins_,18),this.tileSizes_=null,void 0!==t.tileSizes&&(this.tileSizes_=t.tileSizes,f(this.tileSizes_.length==this.resolutions_.length,19)),this.tileSize_=void 0!==t.tileSize?t.tileSize:this.tileSizes_?null:256,f(!this.tileSize_&&this.tileSizes_||this.tileSize_&&!this.tileSizes_,22),this.extent_=void 0!==s?s:null,this.fullTileRanges_=null,this.tmpSize_=[0,0],void 0!==t.sizes?this.fullTileRanges_=t.sizes.map((function(t,e){var n=new Di(Math.min(0,t[0]),Math.max(t[0]-1,-1),Math.min(0,t[1]),Math.max(t[1]-1,-1));if(s){var o=this.getTileRangeForExtentAndZ(s,e);n.minX=Math.max(o.minX,n.minX),n.maxX=Math.min(o.maxX,n.maxX),n.minY=Math.max(o.minY,n.minY),n.maxY=Math.min(o.maxY,n.maxY)}return n}),this):s&&this.calculateTileRanges_(s)}return t.prototype.forEachTileCoord=function(t,e,n){for(var o=this.getTileRangeForExtentAndZ(t,e),i=o.minX,r=o.maxX;i<=r;++i)for(var a=o.minY,s=o.maxY;a<=s;++a)n([e,i,a])},t.prototype.forEachTileCoordParentTileRange=function(t,e,n,o){var i,r,a=null,s=t[0]-1;for(2===this.zoomFactor_?(i=t[1],r=t[2]):a=this.getTileCoordExtent(t,o);s>=this.minZoom;){if(e(s,2===this.zoomFactor_?zi(i=Math.floor(i/2),i,r=Math.floor(r/2),r,n):this.getTileRangeForExtentAndZ(a,s,n)))return!0;--s}return!1},t.prototype.getExtent=function(){return this.extent_},t.prototype.getMaxZoom=function(){return this.maxZoom},t.prototype.getMinZoom=function(){return this.minZoom},t.prototype.getOrigin=function(t){return this.origin_?this.origin_:this.origins_[t]},t.prototype.getResolution=function(t){return this.resolutions_[t]},t.prototype.getResolutions=function(){return this.resolutions_},t.prototype.getTileCoordChildTileRange=function(t,e,n){if(t[0]<this.maxZoom){if(2===this.zoomFactor_){var o=2*t[1],i=2*t[2];return zi(o,o+1,i,i+1,e)}var r=this.getTileCoordExtent(t,n);return this.getTileRangeForExtentAndZ(r,t[0]+1,e)}return null},t.prototype.getTileRangeExtent=function(t,e,n){var o=this.getOrigin(t),i=this.getResolution(t),r=To(this.getTileSize(t),this.tmpSize_),a=o[0]+e.minX*r[0]*i,s=o[0]+(e.maxX+1)*r[0]*i;return b(a,o[1]+e.minY*r[1]*i,s,o[1]+(e.maxY+1)*r[1]*i,n)},t.prototype.getTileRangeForExtentAndZ=function(t,e,n){var o=dr;this.getTileCoordForXYAndZ_(t[0],t[3],e,!1,o);var i=o[1],r=o[2];return this.getTileCoordForXYAndZ_(t[2],t[1],e,!0,o),zi(i,o[1],r,o[2],n)},t.prototype.getTileCoordCenter=function(t){var e=this.getOrigin(t[0]),n=this.getResolution(t[0]),o=To(this.getTileSize(t[0]),this.tmpSize_);return[e[0]+(t[1]+.5)*o[0]*n,e[1]-(t[2]+.5)*o[1]*n]},t.prototype.getTileCoordExtent=function(t,e){var n=this.getOrigin(t[0]),o=this.getResolution(t[0]),i=To(this.getTileSize(t[0]),this.tmpSize_),r=n[0]+t[1]*i[0]*o,a=n[1]-(t[2]+1)*i[1]*o;return b(r,a,r+i[0]*o,a+i[1]*o,e)},t.prototype.getTileCoordForCoordAndResolution=function(t,e,n){return this.getTileCoordForXYAndResolution_(t[0],t[1],e,!1,n)},t.prototype.getTileCoordForXYAndResolution_=function(t,e,n,o,i){var r=this.getZForResolution(n),a=n/this.getResolution(r),s=this.getOrigin(r),l=To(this.getTileSize(r),this.tmpSize_),u=o?.5:0,c=o?.5:0,h=Math.floor((t-s[0])/n+u),p=Math.floor((s[1]-e)/n+c),f=a*h/l[0],d=a*p/l[1];return o?(f=Math.ceil(f)-1,d=Math.ceil(d)-1):(f=Math.floor(f),d=Math.floor(d)),ar(r,f,d,i)},t.prototype.getTileCoordForXYAndZ_=function(t,e,n,o,i){var r=this.getOrigin(n),a=this.getResolution(n),s=To(this.getTileSize(n),this.tmpSize_),l=o?.5:0,u=o?.5:0,c=Math.floor((t-r[0])/a+l),h=Math.floor((r[1]-e)/a+u),p=c/s[0],f=h/s[1];return o?(p=Math.ceil(p)-1,f=Math.ceil(f)-1):(p=Math.floor(p),f=Math.floor(f)),ar(n,p,f,i)},t.prototype.getTileCoordForCoordAndZ=function(t,e,n){return this.getTileCoordForXYAndZ_(t[0],t[1],e,!1,n)},t.prototype.getTileCoordResolution=function(t){return this.resolutions_[t[0]]},t.prototype.getTileSize=function(t){return this.tileSize_?this.tileSize_:this.tileSizes_[t]},t.prototype.getFullTileRange=function(t){return this.fullTileRanges_?this.fullTileRanges_[t]:this.extent_?this.getTileRangeForExtentAndZ(this.extent_,t):null},t.prototype.getZForResolution=function(t,e){return U(n(this.resolutions_,t,e||0),this.minZoom,this.maxZoom)},t.prototype.calculateTileRanges_=function(t){for(var e=this.resolutions_.length,n=new Array(e),o=this.minZoom;o<e;++o)n[o]=this.getTileRangeForExtentAndZ(t,o);this.fullTileRanges_=n},t}();function gr(t){var e=t.getDefaultTileGrid();return e||(e=function(t,e,n,o){return function(t,e,n,o){var i=vr(t,undefined,n);return new _r({extent:t,origin:L(t,"top-left"),resolutions:i,tileSize:n})}(yr(t),0,void 0)}(t),t.setDefaultTileGrid(e)),e}function vr(t,e,n,o){for(var i=void 0!==e?e:42,r=D(t),a=G(t),s=To(void 0!==n?n:256),l=o>0?o:Math.max(a/s[0],r/s[1]),u=i+1,c=new Array(u),h=0;h<u;++h)c[h]=l/Math.pow(2,h);return c}function yr(t){var e=(t=_n(t)).getExtent();if(!e){var n=180*Ne[Xe.DEGREES]/t.getMetersPerUnit();e=b(-n,-n,n,n)}return e}var mr=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),xr=function(t){function e(e){var n=t.call(this,{attributions:e.attributions,attributionsCollapsible:e.attributionsCollapsible,projection:e.projection,state:e.state,wrapX:e.wrapX})||this;n.opaque_=void 0!==e.opaque&&e.opaque,n.tilePixelRatio_=void 0!==e.tilePixelRatio?e.tilePixelRatio:1,n.tileGrid=void 0!==e.tileGrid?e.tileGrid:null;var o=e.tileGrid;return o&&To(o.getTileSize(o.getMinZoom()),[256,256]),n.tileCache=new cr(e.cacheSize||0),n.tmpSize=[0,0],n.key_=e.key||"",n.tileOptions={transition:e.transition},n.zDirection=e.zDirection?e.zDirection:0,n}return mr(e,t),e.prototype.canExpireCache=function(){return this.tileCache.canExpireCache()},e.prototype.expireCache=function(t,e){var n=this.getTileCacheForProjection(t);n&&n.expireCache(e)},e.prototype.forEachLoadedTile=function(t,e,n,o){var i=this.getTileCacheForProjection(t);if(!i)return!1;for(var r,a,s,l=!0,u=n.minX;u<=n.maxX;++u)for(var c=n.minY;c<=n.maxY;++c)a=sr(e,u,c),s=!1,i.containsKey(a)&&(s=2===(r=i.get(a)).getState())&&(s=!1!==o(r)),s||(l=!1);return l},e.prototype.getGutterForProjection=function(t){return 0},e.prototype.getKey=function(){return this.key_},e.prototype.setKey=function(t){this.key_!==t&&(this.key_=t,this.changed())},e.prototype.getOpaque=function(t){return this.opaque_},e.prototype.getResolutions=function(){return this.tileGrid.getResolutions()},e.prototype.getTile=function(t,e,n,o,i){return s()},e.prototype.getTileGrid=function(){return this.tileGrid},e.prototype.getTileGridForProjection=function(t){return this.tileGrid?this.tileGrid:gr(t)},e.prototype.getTileCacheForProjection=function(t){return f(xn(this.getProjection(),t),68),this.tileCache},e.prototype.getTilePixelRatio=function(t){return this.tilePixelRatio_},e.prototype.getTilePixelSize=function(t,e,n){var o,i,r,a=this.getTileGridForProjection(n),s=this.getTilePixelRatio(e),l=To(a.getTileSize(t),this.tmpSize);return 1==s?l:(o=l,i=s,void 0===(r=this.tmpSize)&&(r=[0,0]),r[0]=o[0]*i+.5|0,r[1]=o[1]*i+.5|0,r)},e.prototype.getTileCoordForTileUrlFunction=function(t,e){var n=void 0!==e?e:this.getProjection(),o=this.getTileGridForProjection(n);return this.getWrapX()&&n.isGlobal()&&(t=function(t,e,n){var o=e[0],i=t.getTileCoordCenter(e),r=yr(n);if(C(r,i))return e;var a=G(r),s=Math.ceil((r[0]-i[0])/a);return i[0]+=a*s,t.getTileCoordForCoordAndZ(i,o)}(o,t,n)),function(t,e){var n=t[0],o=t[1],i=t[2];if(e.getMinZoom()>n||n>e.getMaxZoom())return!1;var r=e.getFullTileRange(n);return!r||r.containsXY(o,i)}(t,o)?t:null},e.prototype.clear=function(){this.tileCache.clear()},e.prototype.refresh=function(){this.clear(),t.prototype.refresh.call(this)},e.prototype.updateCacheSize=function(t,e){var n=this.getTileCacheForProjection(e);t>n.highWaterMark&&(n.highWaterMark=t)},e.prototype.useTile=function(t,e,n,o){},e}(fr),Cr=function(t){function e(e,n){var o=t.call(this,e)||this;return o.tile=n,o}return mr(e,t),e}(tt);const Er=xr;function wr(t,e){var n=/\{z\}/g,o=/\{x\}/g,i=/\{y\}/g,r=/\{-y\}/g;return function(a,s,l){return a?t.replace(n,a[0].toString()).replace(o,a[1].toString()).replace(i,a[2].toString()).replace(r,(function(){var t=a[0],n=e.getFullTileRange(t);return f(n,55),(n.getHeight()-a[2]-1).toString()})):void 0}}var br=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Pr=function(t){function e(n){var o=t.call(this,{attributions:n.attributions,cacheSize:n.cacheSize,opaque:n.opaque,projection:n.projection,state:n.state,tileGrid:n.tileGrid,tilePixelRatio:n.tilePixelRatio,wrapX:n.wrapX,transition:n.transition,key:n.key,attributionsCollapsible:n.attributionsCollapsible,zDirection:n.zDirection})||this;return o.generateTileUrlFunction_=o.tileUrlFunction===e.prototype.tileUrlFunction,o.tileLoadFunction=n.tileLoadFunction,n.tileUrlFunction&&(o.tileUrlFunction=n.tileUrlFunction),o.urls=null,n.urls?o.setUrls(n.urls):n.url&&o.setUrl(n.url),o.tileLoadingKeys_={},o}return br(e,t),e.prototype.getTileLoadFunction=function(){return this.tileLoadFunction},e.prototype.getTileUrlFunction=function(){return Object.getPrototypeOf(this).tileUrlFunction===this.tileUrlFunction?this.tileUrlFunction.bind(this):this.tileUrlFunction},e.prototype.getUrls=function(){return this.urls},e.prototype.handleTileChange=function(t){var e,n=t.target,o=u(n),i=n.getState();1==i?(this.tileLoadingKeys_[o]=!0,e="tileloadstart"):o in this.tileLoadingKeys_&&(delete this.tileLoadingKeys_[o],e=3==i?"tileloaderror":2==i?"tileloadend":void 0),null!=e&&this.dispatchEvent(new Cr(e,n))},e.prototype.setTileLoadFunction=function(t){this.tileCache.clear(),this.tileLoadFunction=t,this.changed()},e.prototype.setTileUrlFunction=function(t,e){this.tileUrlFunction=t,this.tileCache.pruneExceptNewestZ(),void 0!==e?this.setKey(e):this.changed()},e.prototype.setUrl=function(t){var e=function(t){var e=[],n=/\{([a-z])-([a-z])\}/.exec(t);if(n){var o=n[1].charCodeAt(0),i=n[2].charCodeAt(0),r=void 0;for(r=o;r<=i;++r)e.push(t.replace(n[0],String.fromCharCode(r)));return e}if(n=/\{(\d+)-(\d+)\}/.exec(t)){for(var a=parseInt(n[2],10),s=parseInt(n[1],10);s<=a;s++)e.push(t.replace(n[0],s.toString()));return e}return e.push(t),e}(t);this.urls=e,this.setUrls(e)},e.prototype.setUrls=function(t){this.urls=t;var e=t.join("\n");this.generateTileUrlFunction_?this.setTileUrlFunction(function(t,e){for(var n=t.length,o=new Array(n),i=0;i<n;++i)o[i]=wr(t[i],e);return function(t){return 1===t.length?t[0]:function(e,n,o){if(e){var i=B(function(t){return(t[1]<<t[0])+t[2]}(e),t.length);return t[i](e,n,o)}}}(o)}(t,this.tileGrid),e):this.setKey(e)},e.prototype.tileUrlFunction=function(t,e,n){},e.prototype.useTile=function(t,e,n){var o=sr(t,e,n);this.tileCache.containsKey(o)&&this.tileCache.get(o)},e}(Er);var Tr=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();function Or(t,e){t.getImage().src=e}const Rr=function(t){function e(e){var n=t.call(this,{attributions:e.attributions,cacheSize:e.cacheSize,opaque:e.opaque,projection:e.projection,state:e.state,tileGrid:e.tileGrid,tileLoadFunction:e.tileLoadFunction?e.tileLoadFunction:Or,tilePixelRatio:e.tilePixelRatio,tileUrlFunction:e.tileUrlFunction,url:e.url,urls:e.urls,wrapX:e.wrapX,transition:e.transition,key:e.key,attributionsCollapsible:e.attributionsCollapsible,zDirection:e.zDirection})||this;return n.crossOrigin=void 0!==e.crossOrigin?e.crossOrigin:null,n.tileClass=void 0!==e.tileClass?e.tileClass:Bi,n.tileCacheForProjection={},n.tileGridForProjection={},n.reprojectionErrorThreshold_=e.reprojectionErrorThreshold,n.contextOptions_=!1===e.imageSmoothing?Ji:void 0,n.renderReprojectionEdges_=!1,n}return Tr(e,t),e.prototype.canExpireCache=function(){if(this.tileCache.canExpireCache())return!0;for(var t in this.tileCacheForProjection)if(this.tileCacheForProjection[t].canExpireCache())return!0;return!1},e.prototype.expireCache=function(t,e){var n=this.getTileCacheForProjection(t);for(var o in this.tileCache.expireCache(this.tileCache==n?e:{}),this.tileCacheForProjection){var i=this.tileCacheForProjection[o];i.expireCache(i==n?e:{})}},e.prototype.getContextOptions=function(){return this.contextOptions_},e.prototype.getGutterForProjection=function(t){return this.getProjection()&&t&&!xn(this.getProjection(),t)?0:this.getGutter()},e.prototype.getGutter=function(){return 0},e.prototype.getKey=function(){return t.prototype.getKey.call(this)+(this.contextOptions_?"\n"+JSON.stringify(this.contextOptions_):"")},e.prototype.getOpaque=function(e){return!(this.getProjection()&&e&&!xn(this.getProjection(),e))&&t.prototype.getOpaque.call(this,e)},e.prototype.getTileGridForProjection=function(t){var e=this.getProjection();if(!this.tileGrid||e&&!xn(e,t)){var n=u(t);return n in this.tileGridForProjection||(this.tileGridForProjection[n]=gr(t)),this.tileGridForProjection[n]}return this.tileGrid},e.prototype.getTileCacheForProjection=function(t){var e=this.getProjection();if(!e||xn(e,t))return this.tileCache;var n=u(t);return n in this.tileCacheForProjection||(this.tileCacheForProjection[n]=new cr(this.tileCache.highWaterMark)),this.tileCacheForProjection[n]},e.prototype.createTile_=function(t,e,n,o,i,r){var a=[t,e,n],s=this.getTileCoordForTileUrlFunction(a,i),l=s?this.tileUrlFunction(s,o,i):void 0,u=new this.tileClass(a,void 0!==l?0:4,void 0!==l?l:"",this.crossOrigin,this.tileLoadFunction,this.tileOptions);return u.key=r,u.addEventListener(st,this.handleTileChange.bind(this)),u},e.prototype.getTile=function(t,e,n,o,i){var r=this.getProjection();if(r&&i&&!xn(r,i)){var a=this.getTileCacheForProjection(i),s=[t,e,n],l=void 0,u=lr(s);a.containsKey(u)&&(l=a.get(u));var c=this.getKey();if(l&&l.key==c)return l;var h=this.getTileGridForProjection(r),p=this.getTileGridForProjection(i),f=this.getTileCoordForTileUrlFunction(s,i),d=new ir(r,h,i,p,s,f,this.getTilePixelRatio(o),this.getGutter(),function(t,e,n,o){return this.getTileInternal(t,e,n,o,r)}.bind(this),this.reprojectionErrorThreshold_,this.renderReprojectionEdges_,this.contextOptions_);return d.key=c,l?(d.interimTile=l,d.refreshInterimChain(),a.replace(u,d)):a.set(u,d),d}return this.getTileInternal(t,e,n,o,r||i)},e.prototype.getTileInternal=function(t,e,n,o,i){var r=null,a=sr(t,e,n),s=this.getKey();if(this.tileCache.containsKey(a)){if((r=this.tileCache.get(a)).key!=s){var l=r;r=this.createTile_(t,e,n,o,i,s),0==l.getState()?r.interimTile=l.interimTile:r.interimTile=l,r.refreshInterimChain(),this.tileCache.replace(a,r)}}else r=this.createTile_(t,e,n,o,i,s),this.tileCache.set(a,r);return r},e.prototype.setRenderReprojectionEdges=function(t){if(this.renderReprojectionEdges_!=t){for(var e in this.renderReprojectionEdges_=t,this.tileCacheForProjection)this.tileCacheForProjection[e].clear();this.changed()}},e.prototype.setTileGridForProjection=function(t,e){var n=_n(t);if(n){var o=u(n);o in this.tileGridForProjection||(this.tileGridForProjection[o]=e)}},e}(Pr);var Sr=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const Mr=function(t){function e(e){var n=e||{},o=void 0!==n.projection?n.projection:"EPSG:3857",i=void 0!==n.tileGrid?n.tileGrid:function(t){var e=t||{},n=e.extent||_n("EPSG:3857").getExtent(),o={extent:n,minZoom:e.minZoom,tileSize:e.tileSize,resolutions:vr(n,e.maxZoom,e.tileSize,e.maxResolution)};return new _r(o)}({extent:yr(o),maxResolution:n.maxResolution,maxZoom:n.maxZoom,minZoom:n.minZoom,tileSize:n.tileSize});return t.call(this,{attributions:n.attributions,cacheSize:n.cacheSize,crossOrigin:n.crossOrigin,imageSmoothing:n.imageSmoothing,opaque:n.opaque,projection:o,reprojectionErrorThreshold:n.reprojectionErrorThreshold,tileGrid:i,tileLoadFunction:n.tileLoadFunction,tilePixelRatio:n.tilePixelRatio,tileUrlFunction:n.tileUrlFunction,url:n.url,urls:n.urls,wrapX:void 0===n.wrapX||n.wrapX,transition:n.transition,attributionsCollapsible:n.attributionsCollapsible,zDirection:n.zDirection})||this}return Sr(e,t),e}(Rr),Ir=mn([25.46816,65.01236]);mn([24.138518517,68.171058543]),new Ti({target:"kartta",layers:[new Ni({source:new Mr({url:"https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png"})})],view:new Po({center:Ir,zoom:12})})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,